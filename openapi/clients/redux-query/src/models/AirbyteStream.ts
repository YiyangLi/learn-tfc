// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SyncMode,
    SyncModeFromJSON,
    SyncModeToJSON,
} from './';

/**
 * the immutable schema defined by the source
 * @export
 * @interface AirbyteStream
 */
export interface AirbyteStream  {
    /**
     * Stream\'s name.
     * @type {string}
     * @memberof AirbyteStream
     */
    name: string;
    /**
     * Stream schema using Json Schema specs.
     * @type {object}
     * @memberof AirbyteStream
     */
    jsonSchema?: object;
    /**
     * 
     * @type {Array<SyncMode>}
     * @memberof AirbyteStream
     */
    supportedSyncModes?: Array<SyncMode>;
    /**
     * If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
     * @type {boolean}
     * @memberof AirbyteStream
     */
    sourceDefinedCursor?: boolean;
    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
     * @type {Array<string>}
     * @memberof AirbyteStream
     */
    defaultCursorField?: Array<string>;
    /**
     * If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
     * @type {Array<Array<string>>}
     * @memberof AirbyteStream
     */
    sourceDefinedPrimaryKey?: Array<Array<string>>;
    /**
     * Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
     * @type {string}
     * @memberof AirbyteStream
     */
    namespace?: string;
}

export function AirbyteStreamFromJSON(json: any): AirbyteStream {
    return {
        'name': json['name'],
        'jsonSchema': !exists(json, 'jsonSchema') ? undefined : json['jsonSchema'],
        'supportedSyncModes': !exists(json, 'supportedSyncModes') ? undefined : (json['supportedSyncModes'] as Array<any>).map(SyncModeFromJSON),
        'sourceDefinedCursor': !exists(json, 'sourceDefinedCursor') ? undefined : json['sourceDefinedCursor'],
        'defaultCursorField': !exists(json, 'defaultCursorField') ? undefined : json['defaultCursorField'],
        'sourceDefinedPrimaryKey': !exists(json, 'sourceDefinedPrimaryKey') ? undefined : json['sourceDefinedPrimaryKey'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function AirbyteStreamToJSON(value?: AirbyteStream): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'jsonSchema': value.jsonSchema,
        'supportedSyncModes': value.supportedSyncModes === undefined ? undefined : (value.supportedSyncModes as Array<any>).map(SyncModeToJSON),
        'sourceDefinedCursor': value.sourceDefinedCursor,
        'defaultCursorField': value.defaultCursorField,
        'sourceDefinedPrimaryKey': value.sourceDefinedPrimaryKey,
        'namespace': value.namespace,
    };
}


