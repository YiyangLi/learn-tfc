// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AirbyteCatalog,
    AirbyteCatalogFromJSON,
    AirbyteCatalogToJSON,
    CatalogDiff,
    CatalogDiffFromJSON,
    CatalogDiffToJSON,
    ConnectionSchedule,
    ConnectionScheduleFromJSON,
    ConnectionScheduleToJSON,
    ConnectionStatus,
    ConnectionStatusFromJSON,
    ConnectionStatusToJSON,
    DestinationRead,
    DestinationReadFromJSON,
    DestinationReadToJSON,
    JobStatus,
    JobStatusFromJSON,
    JobStatusToJSON,
    NamespaceDefinitionType,
    NamespaceDefinitionTypeFromJSON,
    NamespaceDefinitionTypeToJSON,
    OperationRead,
    OperationReadFromJSON,
    OperationReadToJSON,
    ResourceRequirements,
    ResourceRequirementsFromJSON,
    ResourceRequirementsToJSON,
    SourceRead,
    SourceReadFromJSON,
    SourceReadToJSON,
} from './';

/**
 * 
 * @export
 * @interface WebBackendConnectionRead
 */
export interface WebBackendConnectionRead  {
    /**
     * 
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    connectionId: string;
    /**
     * 
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    name: string;
    /**
     * 
     * @type {NamespaceDefinitionType}
     * @memberof WebBackendConnectionRead
     */
    namespaceDefinition?: NamespaceDefinitionType;
    /**
     * Used when namespaceDefinition is \'customformat\'. If blank then behaves like namespaceDefinition = \'destination\'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = \'source\'.
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    namespaceFormat?: string;
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    sourceId: string;
    /**
     * 
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    destinationId: string;
    /**
     * 
     * @type {AirbyteCatalog}
     * @memberof WebBackendConnectionRead
     */
    syncCatalog: AirbyteCatalog;
    /**
     * 
     * @type {ConnectionSchedule}
     * @memberof WebBackendConnectionRead
     */
    schedule?: ConnectionSchedule;
    /**
     * 
     * @type {ConnectionStatus}
     * @memberof WebBackendConnectionRead
     */
    status: ConnectionStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebBackendConnectionRead
     */
    operationIds?: Array<string>;
    /**
     * 
     * @type {SourceRead}
     * @memberof WebBackendConnectionRead
     */
    source: SourceRead;
    /**
     * 
     * @type {DestinationRead}
     * @memberof WebBackendConnectionRead
     */
    destination: DestinationRead;
    /**
     * 
     * @type {Array<OperationRead>}
     * @memberof WebBackendConnectionRead
     */
    operations?: Array<OperationRead>;
    /**
     * epoch time of the latest sync job. null if no sync job has taken place.
     * @type {number}
     * @memberof WebBackendConnectionRead
     */
    latestSyncJobCreatedAt?: number;
    /**
     * 
     * @type {JobStatus}
     * @memberof WebBackendConnectionRead
     */
    latestSyncJobStatus?: JobStatus;
    /**
     * 
     * @type {boolean}
     * @memberof WebBackendConnectionRead
     */
    isSyncing: boolean;
    /**
     * 
     * @type {ResourceRequirements}
     * @memberof WebBackendConnectionRead
     */
    resourceRequirements?: ResourceRequirements;
    /**
     * 
     * @type {string}
     * @memberof WebBackendConnectionRead
     */
    catalogId?: string;
    /**
     * 
     * @type {CatalogDiff}
     * @memberof WebBackendConnectionRead
     */
    catalogDiff?: CatalogDiff;
}

export function WebBackendConnectionReadFromJSON(json: any): WebBackendConnectionRead {
    return {
        'connectionId': json['connectionId'],
        'name': json['name'],
        'namespaceDefinition': !exists(json, 'namespaceDefinition') ? undefined : NamespaceDefinitionTypeFromJSON(json['namespaceDefinition']),
        'namespaceFormat': !exists(json, 'namespaceFormat') ? undefined : json['namespaceFormat'],
        'prefix': !exists(json, 'prefix') ? undefined : json['prefix'],
        'sourceId': json['sourceId'],
        'destinationId': json['destinationId'],
        'syncCatalog': AirbyteCatalogFromJSON(json['syncCatalog']),
        'schedule': !exists(json, 'schedule') ? undefined : ConnectionScheduleFromJSON(json['schedule']),
        'status': ConnectionStatusFromJSON(json['status']),
        'operationIds': !exists(json, 'operationIds') ? undefined : json['operationIds'],
        'source': SourceReadFromJSON(json['source']),
        'destination': DestinationReadFromJSON(json['destination']),
        'operations': !exists(json, 'operations') ? undefined : (json['operations'] as Array<any>).map(OperationReadFromJSON),
        'latestSyncJobCreatedAt': !exists(json, 'latestSyncJobCreatedAt') ? undefined : json['latestSyncJobCreatedAt'],
        'latestSyncJobStatus': !exists(json, 'latestSyncJobStatus') ? undefined : JobStatusFromJSON(json['latestSyncJobStatus']),
        'isSyncing': json['isSyncing'],
        'resourceRequirements': !exists(json, 'resourceRequirements') ? undefined : ResourceRequirementsFromJSON(json['resourceRequirements']),
        'catalogId': !exists(json, 'catalogId') ? undefined : json['catalogId'],
        'catalogDiff': !exists(json, 'catalogDiff') ? undefined : CatalogDiffFromJSON(json['catalogDiff']),
    };
}

export function WebBackendConnectionReadToJSON(value?: WebBackendConnectionRead): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'connectionId': value.connectionId,
        'name': value.name,
        'namespaceDefinition': NamespaceDefinitionTypeToJSON(value.namespaceDefinition),
        'namespaceFormat': value.namespaceFormat,
        'prefix': value.prefix,
        'sourceId': value.sourceId,
        'destinationId': value.destinationId,
        'syncCatalog': AirbyteCatalogToJSON(value.syncCatalog),
        'schedule': ConnectionScheduleToJSON(value.schedule),
        'status': ConnectionStatusToJSON(value.status),
        'operationIds': value.operationIds,
        'source': SourceReadToJSON(value.source),
        'destination': DestinationReadToJSON(value.destination),
        'operations': value.operations === undefined ? undefined : (value.operations as Array<any>).map(OperationReadToJSON),
        'latestSyncJobCreatedAt': value.latestSyncJobCreatedAt,
        'latestSyncJobStatus': JobStatusToJSON(value.latestSyncJobStatus),
        'isSyncing': value.isSyncing,
        'resourceRequirements': ResourceRequirementsToJSON(value.resourceRequirements),
        'catalogId': value.catalogId,
        'catalogDiff': CatalogDiffToJSON(value.catalogDiff),
    };
}


