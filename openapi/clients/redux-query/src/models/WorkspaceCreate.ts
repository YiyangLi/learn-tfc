// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Notification,
    NotificationFromJSON,
    NotificationToJSON,
} from './';

/**
 * 
 * @export
 * @interface WorkspaceCreate
 */
export interface WorkspaceCreate  {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCreate
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCreate
     */
    anonymousDataCollection?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCreate
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCreate
     */
    news?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCreate
     */
    securityUpdates?: boolean;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof WorkspaceCreate
     */
    notifications?: Array<Notification>;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCreate
     */
    displaySetupWizard?: boolean;
}

export function WorkspaceCreateFromJSON(json: any): WorkspaceCreate {
    return {
        'email': !exists(json, 'email') ? undefined : json['email'],
        'anonymousDataCollection': !exists(json, 'anonymousDataCollection') ? undefined : json['anonymousDataCollection'],
        'name': json['name'],
        'news': !exists(json, 'news') ? undefined : json['news'],
        'securityUpdates': !exists(json, 'securityUpdates') ? undefined : json['securityUpdates'],
        'notifications': !exists(json, 'notifications') ? undefined : (json['notifications'] as Array<any>).map(NotificationFromJSON),
        'displaySetupWizard': !exists(json, 'displaySetupWizard') ? undefined : json['displaySetupWizard'],
    };
}

export function WorkspaceCreateToJSON(value?: WorkspaceCreate): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'email': value.email,
        'anonymousDataCollection': value.anonymousDataCollection,
        'name': value.name,
        'news': value.news,
        'securityUpdates': value.securityUpdates,
        'notifications': value.notifications === undefined ? undefined : (value.notifications as Array<any>).map(NotificationToJSON),
        'displaySetupWizard': value.displaySetupWizard,
    };
}


