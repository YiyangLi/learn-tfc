// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FieldNameAndSchema,
    FieldNameAndSchemaFromJSON,
    FieldNameAndSchemaToJSON,
    FieldSchemaUpdate,
    FieldSchemaUpdateFromJSON,
    FieldSchemaUpdateToJSON,
} from './';

/**
 * Describes the difference between two Streams.
 * @export
 * @interface FieldTransform
 */
export interface FieldTransform  {
    /**
     * 
     * @type {string}
     * @memberof FieldTransform
     */
    transformType: FieldTransformTransformTypeEnum;
    /**
     * 
     * @type {FieldNameAndSchema}
     * @memberof FieldTransform
     */
    addField?: FieldNameAndSchema;
    /**
     * 
     * @type {FieldNameAndSchema}
     * @memberof FieldTransform
     */
    removeField?: FieldNameAndSchema;
    /**
     * 
     * @type {FieldSchemaUpdate}
     * @memberof FieldTransform
     */
    updateFieldSchema?: FieldSchemaUpdate;
}

export function FieldTransformFromJSON(json: any): FieldTransform {
    return {
        'transformType': json['transformType'],
        'addField': !exists(json, 'addField') ? undefined : FieldNameAndSchemaFromJSON(json['addField']),
        'removeField': !exists(json, 'removeField') ? undefined : FieldNameAndSchemaFromJSON(json['removeField']),
        'updateFieldSchema': !exists(json, 'updateFieldSchema') ? undefined : FieldSchemaUpdateFromJSON(json['updateFieldSchema']),
    };
}

export function FieldTransformToJSON(value?: FieldTransform): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'transformType': value.transformType,
        'addField': FieldNameAndSchemaToJSON(value.addField),
        'removeField': FieldNameAndSchemaToJSON(value.removeField),
        'updateFieldSchema': FieldSchemaUpdateToJSON(value.updateFieldSchema),
    };
}

/**
* @export
* @enum {string}
*/
export enum FieldTransformTransformTypeEnum {
    AddField = 'add_field',
    RemoveField = 'remove_field',
    UpdateFieldSchema = 'update_field_schema'
}


