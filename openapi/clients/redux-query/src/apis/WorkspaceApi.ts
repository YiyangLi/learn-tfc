// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    SlugRequestBody,
    SlugRequestBodyFromJSON,
    SlugRequestBodyToJSON,
    WorkspaceCreate,
    WorkspaceCreateFromJSON,
    WorkspaceCreateToJSON,
    WorkspaceGiveFeedback,
    WorkspaceGiveFeedbackFromJSON,
    WorkspaceGiveFeedbackToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
    WorkspaceRead,
    WorkspaceReadFromJSON,
    WorkspaceReadToJSON,
    WorkspaceReadList,
    WorkspaceReadListFromJSON,
    WorkspaceReadListToJSON,
    WorkspaceUpdate,
    WorkspaceUpdateFromJSON,
    WorkspaceUpdateToJSON,
    WorkspaceUpdateName,
    WorkspaceUpdateNameFromJSON,
    WorkspaceUpdateNameToJSON,
} from '../models';

export interface CreateWorkspaceRequest {
    workspaceCreate: WorkspaceCreate;
}

export interface DeleteWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface GetWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface GetWorkspaceBySlugRequest {
    slugRequestBody: SlugRequestBody;
}

export interface UpdateWorkspaceRequest {
    workspaceUpdate: WorkspaceUpdate;
}

export interface UpdateWorkspaceFeedbackRequest {
    workspaceGiveFeedback: WorkspaceGiveFeedback;
}

export interface UpdateWorkspaceNameRequest {
    workspaceUpdateName: WorkspaceUpdateName;
}


/**
 * Creates a workspace
 */
function createWorkspaceRaw<T>(requestParameters: CreateWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, WorkspaceRead> = {}): QueryConfig<T> {
    if (requestParameters.workspaceCreate === null || requestParameters.workspaceCreate === undefined) {
        throw new runtime.RequiredError('workspaceCreate','Required parameter requestParameters.workspaceCreate was null or undefined when calling createWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceCreateToJSON(requestParameters.workspaceCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadFromJSON(body), text);
    }

    return config;
}

/**
* Creates a workspace
*/
export function createWorkspace<T>(requestParameters: CreateWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkspaceRead>): QueryConfig<T> {
    return createWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Deletes a workspace
 */
function deleteWorkspaceRaw<T>(requestParameters: DeleteWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling deleteWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/delete`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a workspace
*/
export function deleteWorkspace<T>(requestParameters: DeleteWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Find workspace by ID
 */
function getWorkspaceRaw<T>(requestParameters: GetWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, WorkspaceRead> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling getWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadFromJSON(body), text);
    }

    return config;
}

/**
* Find workspace by ID
*/
export function getWorkspace<T>(requestParameters: GetWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkspaceRead>): QueryConfig<T> {
    return getWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Find workspace by slug
 */
function getWorkspaceBySlugRaw<T>(requestParameters: GetWorkspaceBySlugRequest, requestConfig: runtime.TypedQueryConfig<T, WorkspaceRead> = {}): QueryConfig<T> {
    if (requestParameters.slugRequestBody === null || requestParameters.slugRequestBody === undefined) {
        throw new runtime.RequiredError('slugRequestBody','Required parameter requestParameters.slugRequestBody was null or undefined when calling getWorkspaceBySlug.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/get_by_slug`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SlugRequestBodyToJSON(requestParameters.slugRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadFromJSON(body), text);
    }

    return config;
}

/**
* Find workspace by slug
*/
export function getWorkspaceBySlug<T>(requestParameters: GetWorkspaceBySlugRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkspaceRead>): QueryConfig<T> {
    return getWorkspaceBySlugRaw(requestParameters, requestConfig);
}

/**
 * List all workspaces registered in the current Airbyte deployment
 */
function listWorkspacesRaw<T>( requestConfig: runtime.TypedQueryConfig<T, WorkspaceReadList> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/list`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadListFromJSON(body), text);
    }

    return config;
}

/**
* List all workspaces registered in the current Airbyte deployment
*/
export function listWorkspaces<T>( requestConfig?: runtime.TypedQueryConfig<T, WorkspaceReadList>): QueryConfig<T> {
    return listWorkspacesRaw( requestConfig);
}

/**
 * Update workspace state
 */
function updateWorkspaceRaw<T>(requestParameters: UpdateWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, WorkspaceRead> = {}): QueryConfig<T> {
    if (requestParameters.workspaceUpdate === null || requestParameters.workspaceUpdate === undefined) {
        throw new runtime.RequiredError('workspaceUpdate','Required parameter requestParameters.workspaceUpdate was null or undefined when calling updateWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/update`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceUpdateToJSON(requestParameters.workspaceUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadFromJSON(body), text);
    }

    return config;
}

/**
* Update workspace state
*/
export function updateWorkspace<T>(requestParameters: UpdateWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkspaceRead>): QueryConfig<T> {
    return updateWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Update workspace feedback state
 */
function updateWorkspaceFeedbackRaw<T>(requestParameters: UpdateWorkspaceFeedbackRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.workspaceGiveFeedback === null || requestParameters.workspaceGiveFeedback === undefined) {
        throw new runtime.RequiredError('workspaceGiveFeedback','Required parameter requestParameters.workspaceGiveFeedback was null or undefined when calling updateWorkspaceFeedback.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/tag_feedback_status_as_done`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceGiveFeedbackToJSON(requestParameters.workspaceGiveFeedback),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Update workspace feedback state
*/
export function updateWorkspaceFeedback<T>(requestParameters: UpdateWorkspaceFeedbackRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return updateWorkspaceFeedbackRaw(requestParameters, requestConfig);
}

/**
 * Update workspace name
 */
function updateWorkspaceNameRaw<T>(requestParameters: UpdateWorkspaceNameRequest, requestConfig: runtime.TypedQueryConfig<T, WorkspaceRead> = {}): QueryConfig<T> {
    if (requestParameters.workspaceUpdateName === null || requestParameters.workspaceUpdateName === undefined) {
        throw new runtime.RequiredError('workspaceUpdateName','Required parameter requestParameters.workspaceUpdateName was null or undefined when calling updateWorkspaceName.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/workspaces/update_name`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceUpdateNameToJSON(requestParameters.workspaceUpdateName),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WorkspaceReadFromJSON(body), text);
    }

    return config;
}

/**
* Update workspace name
*/
export function updateWorkspaceName<T>(requestParameters: UpdateWorkspaceNameRequest, requestConfig?: runtime.TypedQueryConfig<T, WorkspaceRead>): QueryConfig<T> {
    return updateWorkspaceNameRaw(requestParameters, requestConfig);
}

