// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ConnectionCreate,
    ConnectionCreateFromJSON,
    ConnectionCreateToJSON,
    ConnectionIdRequestBody,
    ConnectionIdRequestBodyFromJSON,
    ConnectionIdRequestBodyToJSON,
    ConnectionRead,
    ConnectionReadFromJSON,
    ConnectionReadToJSON,
    ConnectionReadList,
    ConnectionReadListFromJSON,
    ConnectionReadListToJSON,
    ConnectionSearch,
    ConnectionSearchFromJSON,
    ConnectionSearchToJSON,
    ConnectionState,
    ConnectionStateFromJSON,
    ConnectionStateToJSON,
    ConnectionStateType,
    ConnectionStateTypeFromJSON,
    ConnectionStateTypeToJSON,
    ConnectionUpdate,
    ConnectionUpdateFromJSON,
    ConnectionUpdateToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    JobInfoRead,
    JobInfoReadFromJSON,
    JobInfoReadToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CreateConnectionRequest {
    connectionCreate: ConnectionCreate;
}

export interface DeleteConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetStateRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetStateTypeRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface ListAllConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface ListConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface ResetConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface SearchConnectionsRequest {
    connectionSearch: ConnectionSearch;
}

export interface SyncConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface UpdateConnectionRequest {
    connectionUpdate: ConnectionUpdate;
}


/**
 * Create a connection between a source and a destination
 */
function createConnectionRaw<T>(requestParameters: CreateConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.connectionCreate === null || requestParameters.connectionCreate === undefined) {
        throw new runtime.RequiredError('connectionCreate','Required parameter requestParameters.connectionCreate was null or undefined when calling createConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionCreateToJSON(requestParameters.connectionCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Create a connection between a source and a destination
*/
export function createConnection<T>(requestParameters: CreateConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionRead>): QueryConfig<T> {
    return createConnectionRaw(requestParameters, requestConfig);
}

/**
 * Delete a connection
 */
function deleteConnectionRaw<T>(requestParameters: DeleteConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling deleteConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/delete`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a connection
*/
export function deleteConnection<T>(requestParameters: DeleteConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteConnectionRaw(requestParameters, requestConfig);
}

/**
 * Get a connection
 */
function getConnectionRaw<T>(requestParameters: GetConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Get a connection
*/
export function getConnection<T>(requestParameters: GetConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionRead>): QueryConfig<T> {
    return getConnectionRaw(requestParameters, requestConfig);
}

/**
 * Fetch the current state for a connection.
 */
function getStateRaw<T>(requestParameters: GetStateRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionState> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getState.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/state/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionStateFromJSON(body), text);
    }

    return config;
}

/**
* Fetch the current state for a connection.
*/
export function getState<T>(requestParameters: GetStateRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionState>): QueryConfig<T> {
    return getStateRaw(requestParameters, requestConfig);
}

/**
 * Fetch the current type for a connection.
 */
function getStateTypeRaw<T>(requestParameters: GetStateTypeRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionStateType> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getStateType.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/state/type/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionStateTypeFromJSON(body), text);
    }

    return config;
}

/**
* Fetch the current type for a connection.
*/
export function getStateType<T>(requestParameters: GetStateTypeRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionStateType>): QueryConfig<T> {
    return getStateTypeRaw(requestParameters, requestConfig);
}

/**
 * List connections for workspace, including deleted connections.
 * Returns all connections for a workspace, including deleted connections.
 */
function listAllConnectionsForWorkspaceRaw<T>(requestParameters: ListAllConnectionsForWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listAllConnectionsForWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/list_all`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* List connections for workspace, including deleted connections.
* Returns all connections for a workspace, including deleted connections.
*/
export function listAllConnectionsForWorkspace<T>(requestParameters: ListAllConnectionsForWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionReadList>): QueryConfig<T> {
    return listAllConnectionsForWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * List connections for workspace. Does not return deleted connections.
 * Returns all connections for a workspace.
 */
function listConnectionsForWorkspaceRaw<T>(requestParameters: ListConnectionsForWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listConnectionsForWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/list`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* List connections for workspace. Does not return deleted connections.
* Returns all connections for a workspace.
*/
export function listConnectionsForWorkspace<T>(requestParameters: ListConnectionsForWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionReadList>): QueryConfig<T> {
    return listConnectionsForWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
 */
function resetConnectionRaw<T>(requestParameters: ResetConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, JobInfoRead> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling resetConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/reset`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(JobInfoReadFromJSON(body), text);
    }

    return config;
}

/**
* Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
*/
export function resetConnection<T>(requestParameters: ResetConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, JobInfoRead>): QueryConfig<T> {
    return resetConnectionRaw(requestParameters, requestConfig);
}

/**
 * Search connections
 */
function searchConnectionsRaw<T>(requestParameters: SearchConnectionsRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.connectionSearch === null || requestParameters.connectionSearch === undefined) {
        throw new runtime.RequiredError('connectionSearch','Required parameter requestParameters.connectionSearch was null or undefined when calling searchConnections.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/search`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionSearchToJSON(requestParameters.connectionSearch),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* Search connections
*/
export function searchConnections<T>(requestParameters: SearchConnectionsRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionReadList>): QueryConfig<T> {
    return searchConnectionsRaw(requestParameters, requestConfig);
}

/**
 * Trigger a manual sync of the connection
 */
function syncConnectionRaw<T>(requestParameters: SyncConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, JobInfoRead> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling syncConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/sync`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(JobInfoReadFromJSON(body), text);
    }

    return config;
}

/**
* Trigger a manual sync of the connection
*/
export function syncConnection<T>(requestParameters: SyncConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, JobInfoRead>): QueryConfig<T> {
    return syncConnectionRaw(requestParameters, requestConfig);
}

/**
 * Update a connection
 */
function updateConnectionRaw<T>(requestParameters: UpdateConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, ConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.connectionUpdate === null || requestParameters.connectionUpdate === undefined) {
        throw new runtime.RequiredError('connectionUpdate','Required parameter requestParameters.connectionUpdate was null or undefined when calling updateConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/connections/update`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionUpdateToJSON(requestParameters.connectionUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Update a connection
*/
export function updateConnection<T>(requestParameters: UpdateConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, ConnectionRead>): QueryConfig<T> {
    return updateConnectionRaw(requestParameters, requestConfig);
}

