// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CheckOperationRead,
    CheckOperationReadFromJSON,
    CheckOperationReadToJSON,
    ConnectionIdRequestBody,
    ConnectionIdRequestBodyFromJSON,
    ConnectionIdRequestBodyToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    OperationCreate,
    OperationCreateFromJSON,
    OperationCreateToJSON,
    OperationIdRequestBody,
    OperationIdRequestBodyFromJSON,
    OperationIdRequestBodyToJSON,
    OperationRead,
    OperationReadFromJSON,
    OperationReadToJSON,
    OperationReadList,
    OperationReadListFromJSON,
    OperationReadListToJSON,
    OperationUpdate,
    OperationUpdateFromJSON,
    OperationUpdateToJSON,
    OperatorConfiguration,
    OperatorConfigurationFromJSON,
    OperatorConfigurationToJSON,
} from '../models';

export interface CheckOperationRequest {
    operatorConfiguration: OperatorConfiguration;
}

export interface CreateOperationRequest {
    operationCreate: OperationCreate;
}

export interface DeleteOperationRequest {
    operationIdRequestBody: OperationIdRequestBody;
}

export interface GetOperationRequest {
    operationIdRequestBody: OperationIdRequestBody;
}

export interface ListOperationsForConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface UpdateOperationRequest {
    operationUpdate: OperationUpdate;
}


/**
 * Check if an operation to be created is valid
 */
function checkOperationRaw<T>(requestParameters: CheckOperationRequest, requestConfig: runtime.TypedQueryConfig<T, CheckOperationRead> = {}): QueryConfig<T> {
    if (requestParameters.operatorConfiguration === null || requestParameters.operatorConfiguration === undefined) {
        throw new runtime.RequiredError('operatorConfiguration','Required parameter requestParameters.operatorConfiguration was null or undefined when calling checkOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/check`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OperatorConfigurationToJSON(requestParameters.operatorConfiguration),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CheckOperationReadFromJSON(body), text);
    }

    return config;
}

/**
* Check if an operation to be created is valid
*/
export function checkOperation<T>(requestParameters: CheckOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, CheckOperationRead>): QueryConfig<T> {
    return checkOperationRaw(requestParameters, requestConfig);
}

/**
 * Create an operation to be applied as part of a connection pipeline
 */
function createOperationRaw<T>(requestParameters: CreateOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OperationRead> = {}): QueryConfig<T> {
    if (requestParameters.operationCreate === null || requestParameters.operationCreate === undefined) {
        throw new runtime.RequiredError('operationCreate','Required parameter requestParameters.operationCreate was null or undefined when calling createOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OperationCreateToJSON(requestParameters.operationCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OperationReadFromJSON(body), text);
    }

    return config;
}

/**
* Create an operation to be applied as part of a connection pipeline
*/
export function createOperation<T>(requestParameters: CreateOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OperationRead>): QueryConfig<T> {
    return createOperationRaw(requestParameters, requestConfig);
}

/**
 * Delete an operation
 */
function deleteOperationRaw<T>(requestParameters: DeleteOperationRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.operationIdRequestBody === null || requestParameters.operationIdRequestBody === undefined) {
        throw new runtime.RequiredError('operationIdRequestBody','Required parameter requestParameters.operationIdRequestBody was null or undefined when calling deleteOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/delete`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OperationIdRequestBodyToJSON(requestParameters.operationIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete an operation
*/
export function deleteOperation<T>(requestParameters: DeleteOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOperationRaw(requestParameters, requestConfig);
}

/**
 * Returns an operation
 */
function getOperationRaw<T>(requestParameters: GetOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OperationRead> = {}): QueryConfig<T> {
    if (requestParameters.operationIdRequestBody === null || requestParameters.operationIdRequestBody === undefined) {
        throw new runtime.RequiredError('operationIdRequestBody','Required parameter requestParameters.operationIdRequestBody was null or undefined when calling getOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OperationIdRequestBodyToJSON(requestParameters.operationIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OperationReadFromJSON(body), text);
    }

    return config;
}

/**
* Returns an operation
*/
export function getOperation<T>(requestParameters: GetOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OperationRead>): QueryConfig<T> {
    return getOperationRaw(requestParameters, requestConfig);
}

/**
 * List operations for connection.
 * Returns all operations for a connection.
 */
function listOperationsForConnectionRaw<T>(requestParameters: ListOperationsForConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, OperationReadList> = {}): QueryConfig<T> {
    if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
        throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling listOperationsForConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/list`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OperationReadListFromJSON(body), text);
    }

    return config;
}

/**
* List operations for connection.
* Returns all operations for a connection.
*/
export function listOperationsForConnection<T>(requestParameters: ListOperationsForConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, OperationReadList>): QueryConfig<T> {
    return listOperationsForConnectionRaw(requestParameters, requestConfig);
}

/**
 * Update an operation
 */
function updateOperationRaw<T>(requestParameters: UpdateOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OperationRead> = {}): QueryConfig<T> {
    if (requestParameters.operationUpdate === null || requestParameters.operationUpdate === undefined) {
        throw new runtime.RequiredError('operationUpdate','Required parameter requestParameters.operationUpdate was null or undefined when calling updateOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/operations/update`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OperationUpdateToJSON(requestParameters.operationUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OperationReadFromJSON(body), text);
    }

    return config;
}

/**
* Update an operation
*/
export function updateOperation<T>(requestParameters: UpdateOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OperationRead>): QueryConfig<T> {
    return updateOperationRaw(requestParameters, requestConfig);
}

