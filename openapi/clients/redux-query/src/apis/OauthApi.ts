// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CompleteDestinationOAuthRequest,
    CompleteDestinationOAuthRequestFromJSON,
    CompleteDestinationOAuthRequestToJSON,
    CompleteSourceOauthRequest,
    CompleteSourceOauthRequestFromJSON,
    CompleteSourceOauthRequestToJSON,
    DestinationOauthConsentRequest,
    DestinationOauthConsentRequestFromJSON,
    DestinationOauthConsentRequestToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    KnownExceptionInfo,
    KnownExceptionInfoFromJSON,
    KnownExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    OAuthConsentRead,
    OAuthConsentReadFromJSON,
    OAuthConsentReadToJSON,
    SetInstancewideDestinationOauthParamsRequestBody,
    SetInstancewideDestinationOauthParamsRequestBodyFromJSON,
    SetInstancewideDestinationOauthParamsRequestBodyToJSON,
    SetInstancewideSourceOauthParamsRequestBody,
    SetInstancewideSourceOauthParamsRequestBodyFromJSON,
    SetInstancewideSourceOauthParamsRequestBodyToJSON,
    SourceOauthConsentRequest,
    SourceOauthConsentRequestFromJSON,
    SourceOauthConsentRequestToJSON,
} from '../models';

export interface CompleteDestinationOAuthRequest {
    completeDestinationOAuthRequest: CompleteDestinationOAuthRequest;
}

export interface CompleteSourceOAuthRequest {
    completeSourceOauthRequest: CompleteSourceOauthRequest;
}

export interface GetDestinationOAuthConsentRequest {
    destinationOauthConsentRequest: DestinationOauthConsentRequest;
}

export interface GetSourceOAuthConsentRequest {
    sourceOauthConsentRequest: SourceOauthConsentRequest;
}

export interface SetInstancewideDestinationOauthParamsRequest {
    setInstancewideDestinationOauthParamsRequestBody: SetInstancewideDestinationOauthParamsRequestBody;
}

export interface SetInstancewideSourceOauthParamsRequest {
    setInstancewideSourceOauthParamsRequestBody: SetInstancewideSourceOauthParamsRequestBody;
}


/**
 * Given a destination def ID generate an access/refresh token etc.
 */
function completeDestinationOAuthRaw<T>(requestParameters: CompleteDestinationOAuthRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: any; }> = {}): QueryConfig<T> {
    if (requestParameters.completeDestinationOAuthRequest === null || requestParameters.completeDestinationOAuthRequest === undefined) {
        throw new runtime.RequiredError('completeDestinationOAuthRequest','Required parameter requestParameters.completeDestinationOAuthRequest was null or undefined when calling completeDestinationOAuth.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/destination_oauths/complete_oauth`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CompleteDestinationOAuthRequestToJSON(requestParameters.completeDestinationOAuthRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Given a destination def ID generate an access/refresh token etc.
*/
export function completeDestinationOAuth<T>(requestParameters: CompleteDestinationOAuthRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: any; }>): QueryConfig<T> {
    return completeDestinationOAuthRaw(requestParameters, requestConfig);
}

/**
 * Given a source def ID generate an access/refresh token etc.
 */
function completeSourceOAuthRaw<T>(requestParameters: CompleteSourceOAuthRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: any; }> = {}): QueryConfig<T> {
    if (requestParameters.completeSourceOauthRequest === null || requestParameters.completeSourceOauthRequest === undefined) {
        throw new runtime.RequiredError('completeSourceOauthRequest','Required parameter requestParameters.completeSourceOauthRequest was null or undefined when calling completeSourceOAuth.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/source_oauths/complete_oauth`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CompleteSourceOauthRequestToJSON(requestParameters.completeSourceOauthRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Given a source def ID generate an access/refresh token etc.
*/
export function completeSourceOAuth<T>(requestParameters: CompleteSourceOAuthRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: any; }>): QueryConfig<T> {
    return completeSourceOAuthRaw(requestParameters, requestConfig);
}

/**
 * Given a destination connector definition ID, return the URL to the consent screen where to redirect the user to.
 */
function getDestinationOAuthConsentRaw<T>(requestParameters: GetDestinationOAuthConsentRequest, requestConfig: runtime.TypedQueryConfig<T, OAuthConsentRead> = {}): QueryConfig<T> {
    if (requestParameters.destinationOauthConsentRequest === null || requestParameters.destinationOauthConsentRequest === undefined) {
        throw new runtime.RequiredError('destinationOauthConsentRequest','Required parameter requestParameters.destinationOauthConsentRequest was null or undefined when calling getDestinationOAuthConsent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/destination_oauths/get_consent_url`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DestinationOauthConsentRequestToJSON(requestParameters.destinationOauthConsentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OAuthConsentReadFromJSON(body), text);
    }

    return config;
}

/**
* Given a destination connector definition ID, return the URL to the consent screen where to redirect the user to.
*/
export function getDestinationOAuthConsent<T>(requestParameters: GetDestinationOAuthConsentRequest, requestConfig?: runtime.TypedQueryConfig<T, OAuthConsentRead>): QueryConfig<T> {
    return getDestinationOAuthConsentRaw(requestParameters, requestConfig);
}

/**
 * Given a source connector definition ID, return the URL to the consent screen where to redirect the user to.
 */
function getSourceOAuthConsentRaw<T>(requestParameters: GetSourceOAuthConsentRequest, requestConfig: runtime.TypedQueryConfig<T, OAuthConsentRead> = {}): QueryConfig<T> {
    if (requestParameters.sourceOauthConsentRequest === null || requestParameters.sourceOauthConsentRequest === undefined) {
        throw new runtime.RequiredError('sourceOauthConsentRequest','Required parameter requestParameters.sourceOauthConsentRequest was null or undefined when calling getSourceOAuthConsent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/source_oauths/get_consent_url`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SourceOauthConsentRequestToJSON(requestParameters.sourceOauthConsentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OAuthConsentReadFromJSON(body), text);
    }

    return config;
}

/**
* Given a source connector definition ID, return the URL to the consent screen where to redirect the user to.
*/
export function getSourceOAuthConsent<T>(requestParameters: GetSourceOAuthConsentRequest, requestConfig?: runtime.TypedQueryConfig<T, OAuthConsentRead>): QueryConfig<T> {
    return getSourceOAuthConsentRaw(requestParameters, requestConfig);
}

/**
 * Sets instancewide variables to be used for the oauth flow when creating this destination. When set, these variables will be injected into a connector\'s configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company\'s Google Ads developer_token, client_id, and client_secret without the user having to know about these variables. 
 */
function setInstancewideDestinationOauthParamsRaw<T>(requestParameters: SetInstancewideDestinationOauthParamsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.setInstancewideDestinationOauthParamsRequestBody === null || requestParameters.setInstancewideDestinationOauthParamsRequestBody === undefined) {
        throw new runtime.RequiredError('setInstancewideDestinationOauthParamsRequestBody','Required parameter requestParameters.setInstancewideDestinationOauthParamsRequestBody was null or undefined when calling setInstancewideDestinationOauthParams.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/destination_oauths/oauth_params/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SetInstancewideDestinationOauthParamsRequestBodyToJSON(requestParameters.setInstancewideDestinationOauthParamsRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Sets instancewide variables to be used for the oauth flow when creating this destination. When set, these variables will be injected into a connector\'s configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company\'s Google Ads developer_token, client_id, and client_secret without the user having to know about these variables. 
*/
export function setInstancewideDestinationOauthParams<T>(requestParameters: SetInstancewideDestinationOauthParamsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return setInstancewideDestinationOauthParamsRaw(requestParameters, requestConfig);
}

/**
 * Sets instancewide variables to be used for the oauth flow when creating this source. When set, these variables will be injected into a connector\'s configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company\'s Google Ads developer_token, client_id, and client_secret without the user having to know about these variables. 
 */
function setInstancewideSourceOauthParamsRaw<T>(requestParameters: SetInstancewideSourceOauthParamsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.setInstancewideSourceOauthParamsRequestBody === null || requestParameters.setInstancewideSourceOauthParamsRequestBody === undefined) {
        throw new runtime.RequiredError('setInstancewideSourceOauthParamsRequestBody','Required parameter requestParameters.setInstancewideSourceOauthParamsRequestBody was null or undefined when calling setInstancewideSourceOauthParams.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/source_oauths/oauth_params/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SetInstancewideSourceOauthParamsRequestBodyToJSON(requestParameters.setInstancewideSourceOauthParamsRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Sets instancewide variables to be used for the oauth flow when creating this source. When set, these variables will be injected into a connector\'s configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company\'s Google Ads developer_token, client_id, and client_secret without the user having to know about these variables. 
*/
export function setInstancewideSourceOauthParams<T>(requestParameters: SetInstancewideSourceOauthParamsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return setInstancewideSourceOauthParamsRaw(requestParameters, requestConfig);
}

