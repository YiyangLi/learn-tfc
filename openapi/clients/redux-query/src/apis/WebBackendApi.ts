// tslint:disable
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    WebBackendConnectionCreate,
    WebBackendConnectionCreateFromJSON,
    WebBackendConnectionCreateToJSON,
    WebBackendConnectionRead,
    WebBackendConnectionReadFromJSON,
    WebBackendConnectionReadToJSON,
    WebBackendConnectionReadList,
    WebBackendConnectionReadListFromJSON,
    WebBackendConnectionReadListToJSON,
    WebBackendConnectionRequestBody,
    WebBackendConnectionRequestBodyFromJSON,
    WebBackendConnectionRequestBodyToJSON,
    WebBackendConnectionSearch,
    WebBackendConnectionSearchFromJSON,
    WebBackendConnectionSearchToJSON,
    WebBackendConnectionUpdate,
    WebBackendConnectionUpdateFromJSON,
    WebBackendConnectionUpdateToJSON,
    WebBackendWorkspaceState,
    WebBackendWorkspaceStateFromJSON,
    WebBackendWorkspaceStateToJSON,
    WebBackendWorkspaceStateResult,
    WebBackendWorkspaceStateResultFromJSON,
    WebBackendWorkspaceStateResultToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface WebBackendCreateConnectionRequest {
    webBackendConnectionCreate: WebBackendConnectionCreate;
}

export interface WebBackendGetConnectionRequest {
    webBackendConnectionRequestBody: WebBackendConnectionRequestBody;
}

export interface WebBackendGetWorkspaceStateRequest {
    webBackendWorkspaceState?: WebBackendWorkspaceState;
}

export interface WebBackendListAllConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface WebBackendListConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface WebBackendSearchConnectionsRequest {
    webBackendConnectionSearch: WebBackendConnectionSearch;
}

export interface WebBackendUpdateConnectionRequest {
    webBackendConnectionUpdate: WebBackendConnectionUpdate;
}


/**
 * Create a connection
 */
function webBackendCreateConnectionRaw<T>(requestParameters: WebBackendCreateConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.webBackendConnectionCreate === null || requestParameters.webBackendConnectionCreate === undefined) {
        throw new runtime.RequiredError('webBackendConnectionCreate','Required parameter requestParameters.webBackendConnectionCreate was null or undefined when calling webBackendCreateConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/create`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WebBackendConnectionCreateToJSON(requestParameters.webBackendConnectionCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Create a connection
*/
export function webBackendCreateConnection<T>(requestParameters: WebBackendCreateConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionRead>): QueryConfig<T> {
    return webBackendCreateConnectionRaw(requestParameters, requestConfig);
}

/**
 * Get a connection
 */
function webBackendGetConnectionRaw<T>(requestParameters: WebBackendGetConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.webBackendConnectionRequestBody === null || requestParameters.webBackendConnectionRequestBody === undefined) {
        throw new runtime.RequiredError('webBackendConnectionRequestBody','Required parameter requestParameters.webBackendConnectionRequestBody was null or undefined when calling webBackendGetConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WebBackendConnectionRequestBodyToJSON(requestParameters.webBackendConnectionRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Get a connection
*/
export function webBackendGetConnection<T>(requestParameters: WebBackendGetConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionRead>): QueryConfig<T> {
    return webBackendGetConnectionRaw(requestParameters, requestConfig);
}

/**
 * Returns the current state of a workspace
 */
function webBackendGetWorkspaceStateRaw<T>(requestParameters: WebBackendGetWorkspaceStateRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendWorkspaceStateResult> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/workspace/state`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WebBackendWorkspaceStateToJSON(requestParameters.webBackendWorkspaceState),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendWorkspaceStateResultFromJSON(body), text);
    }

    return config;
}

/**
* Returns the current state of a workspace
*/
export function webBackendGetWorkspaceState<T>(requestParameters: WebBackendGetWorkspaceStateRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendWorkspaceStateResult>): QueryConfig<T> {
    return webBackendGetWorkspaceStateRaw(requestParameters, requestConfig);
}

/**
 * Returns all connections for a workspace.
 */
function webBackendListAllConnectionsForWorkspaceRaw<T>(requestParameters: WebBackendListAllConnectionsForWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling webBackendListAllConnectionsForWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/list_all`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* Returns all connections for a workspace.
*/
export function webBackendListAllConnectionsForWorkspace<T>(requestParameters: WebBackendListAllConnectionsForWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionReadList>): QueryConfig<T> {
    return webBackendListAllConnectionsForWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Returns all non-deleted connections for a workspace.
 */
function webBackendListConnectionsForWorkspaceRaw<T>(requestParameters: WebBackendListConnectionsForWorkspaceRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
        throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling webBackendListConnectionsForWorkspace.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/list`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* Returns all non-deleted connections for a workspace.
*/
export function webBackendListConnectionsForWorkspace<T>(requestParameters: WebBackendListConnectionsForWorkspaceRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionReadList>): QueryConfig<T> {
    return webBackendListConnectionsForWorkspaceRaw(requestParameters, requestConfig);
}

/**
 * Search connections
 */
function webBackendSearchConnectionsRaw<T>(requestParameters: WebBackendSearchConnectionsRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionReadList> = {}): QueryConfig<T> {
    if (requestParameters.webBackendConnectionSearch === null || requestParameters.webBackendConnectionSearch === undefined) {
        throw new runtime.RequiredError('webBackendConnectionSearch','Required parameter requestParameters.webBackendConnectionSearch was null or undefined when calling webBackendSearchConnections.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/search`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WebBackendConnectionSearchToJSON(requestParameters.webBackendConnectionSearch),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadListFromJSON(body), text);
    }

    return config;
}

/**
* Search connections
*/
export function webBackendSearchConnections<T>(requestParameters: WebBackendSearchConnectionsRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionReadList>): QueryConfig<T> {
    return webBackendSearchConnectionsRaw(requestParameters, requestConfig);
}

/**
 * Update a connection
 */
function webBackendUpdateConnectionRaw<T>(requestParameters: WebBackendUpdateConnectionRequest, requestConfig: runtime.TypedQueryConfig<T, WebBackendConnectionRead> = {}): QueryConfig<T> {
    if (requestParameters.webBackendConnectionUpdate === null || requestParameters.webBackendConnectionUpdate === undefined) {
        throw new runtime.RequiredError('webBackendConnectionUpdate','Required parameter requestParameters.webBackendConnectionUpdate was null or undefined when calling webBackendUpdateConnection.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/web_backend/connections/update`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WebBackendConnectionUpdateToJSON(requestParameters.webBackendConnectionUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WebBackendConnectionReadFromJSON(body), text);
    }

    return config;
}

/**
* Update a connection
*/
export function webBackendUpdateConnection<T>(requestParameters: WebBackendUpdateConnectionRequest, requestConfig?: runtime.TypedQueryConfig<T, WebBackendConnectionRead>): QueryConfig<T> {
    return webBackendUpdateConnectionRaw(requestParameters, requestConfig);
}

