/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Notification,
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';

/**
 * 
 * @export
 * @interface WorkspaceRead
 */
export interface WorkspaceRead {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceRead
     */
    workspaceId: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceRead
     */
    customerId: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceRead
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceRead
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceRead
     */
    slug: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    initialSetupComplete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    displaySetupWizard?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    anonymousDataCollection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    news?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    securityUpdates?: boolean;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof WorkspaceRead
     */
    notifications?: Array<Notification>;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    firstCompletedSync?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceRead
     */
    feedbackDone?: boolean;
}

export function WorkspaceReadFromJSON(json: any): WorkspaceRead {
    return WorkspaceReadFromJSONTyped(json, false);
}

export function WorkspaceReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workspaceId': json['workspaceId'],
        'customerId': json['customerId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'name': json['name'],
        'slug': json['slug'],
        'initialSetupComplete': json['initialSetupComplete'],
        'displaySetupWizard': !exists(json, 'displaySetupWizard') ? undefined : json['displaySetupWizard'],
        'anonymousDataCollection': !exists(json, 'anonymousDataCollection') ? undefined : json['anonymousDataCollection'],
        'news': !exists(json, 'news') ? undefined : json['news'],
        'securityUpdates': !exists(json, 'securityUpdates') ? undefined : json['securityUpdates'],
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
        'firstCompletedSync': !exists(json, 'firstCompletedSync') ? undefined : json['firstCompletedSync'],
        'feedbackDone': !exists(json, 'feedbackDone') ? undefined : json['feedbackDone'],
    };
}

export function WorkspaceReadToJSON(value?: WorkspaceRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workspaceId': value.workspaceId,
        'customerId': value.customerId,
        'email': value.email,
        'name': value.name,
        'slug': value.slug,
        'initialSetupComplete': value.initialSetupComplete,
        'displaySetupWizard': value.displaySetupWizard,
        'anonymousDataCollection': value.anonymousDataCollection,
        'news': value.news,
        'securityUpdates': value.securityUpdates,
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(NotificationToJSON)),
        'firstCompletedSync': value.firstCompletedSync,
        'feedbackDone': value.feedbackDone,
    };
}

