/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DestinationSyncMode,
    DestinationSyncModeFromJSON,
    DestinationSyncModeFromJSONTyped,
    DestinationSyncModeToJSON,
} from './DestinationSyncMode';
import {
    SyncMode,
    SyncModeFromJSON,
    SyncModeFromJSONTyped,
    SyncModeToJSON,
} from './SyncMode';

/**
 * the mutable part of the stream to configure the destination
 * @export
 * @interface AirbyteStreamConfiguration
 */
export interface AirbyteStreamConfiguration {
    /**
     * 
     * @type {SyncMode}
     * @memberof AirbyteStreamConfiguration
     */
    syncMode: SyncMode;
    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
     * @type {Array<string>}
     * @memberof AirbyteStreamConfiguration
     */
    cursorField?: Array<string>;
    /**
     * 
     * @type {DestinationSyncMode}
     * @memberof AirbyteStreamConfiguration
     */
    destinationSyncMode: DestinationSyncMode;
    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
     * @type {Array<Array<string>>}
     * @memberof AirbyteStreamConfiguration
     */
    primaryKey?: Array<Array<string>>;
    /**
     * Alias name to the stream to be used in the destination
     * @type {string}
     * @memberof AirbyteStreamConfiguration
     */
    aliasName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AirbyteStreamConfiguration
     */
    selected?: boolean;
}

export function AirbyteStreamConfigurationFromJSON(json: any): AirbyteStreamConfiguration {
    return AirbyteStreamConfigurationFromJSONTyped(json, false);
}

export function AirbyteStreamConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): AirbyteStreamConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'syncMode': SyncModeFromJSON(json['syncMode']),
        'cursorField': !exists(json, 'cursorField') ? undefined : json['cursorField'],
        'destinationSyncMode': DestinationSyncModeFromJSON(json['destinationSyncMode']),
        'primaryKey': !exists(json, 'primaryKey') ? undefined : json['primaryKey'],
        'aliasName': !exists(json, 'aliasName') ? undefined : json['aliasName'],
        'selected': !exists(json, 'selected') ? undefined : json['selected'],
    };
}

export function AirbyteStreamConfigurationToJSON(value?: AirbyteStreamConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'syncMode': SyncModeToJSON(value.syncMode),
        'cursorField': value.cursorField,
        'destinationSyncMode': DestinationSyncModeToJSON(value.destinationSyncMode),
        'primaryKey': value.primaryKey,
        'aliasName': value.aliasName,
        'selected': value.selected,
    };
}

