/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConnectionSchedule,
    ConnectionScheduleFromJSON,
    ConnectionScheduleFromJSONTyped,
    ConnectionScheduleToJSON,
} from './ConnectionSchedule';
import {
    ConnectionStatus,
    ConnectionStatusFromJSON,
    ConnectionStatusFromJSONTyped,
    ConnectionStatusToJSON,
} from './ConnectionStatus';
import {
    DestinationSearch,
    DestinationSearchFromJSON,
    DestinationSearchFromJSONTyped,
    DestinationSearchToJSON,
} from './DestinationSearch';
import {
    NamespaceDefinitionType,
    NamespaceDefinitionTypeFromJSON,
    NamespaceDefinitionTypeFromJSONTyped,
    NamespaceDefinitionTypeToJSON,
} from './NamespaceDefinitionType';
import {
    SourceSearch,
    SourceSearchFromJSON,
    SourceSearchFromJSONTyped,
    SourceSearchToJSON,
} from './SourceSearch';

/**
 * 
 * @export
 * @interface ConnectionSearch
 */
export interface ConnectionSearch {
    /**
     * 
     * @type {string}
     * @memberof ConnectionSearch
     */
    connectionId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionSearch
     */
    name?: string;
    /**
     * 
     * @type {NamespaceDefinitionType}
     * @memberof ConnectionSearch
     */
    namespaceDefinition?: NamespaceDefinitionType;
    /**
     * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     * @type {string}
     * @memberof ConnectionSearch
     */
    namespaceFormat?: string;
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     * @type {string}
     * @memberof ConnectionSearch
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionSearch
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionSearch
     */
    destinationId?: string;
    /**
     * 
     * @type {ConnectionSchedule}
     * @memberof ConnectionSearch
     */
    schedule?: ConnectionSchedule;
    /**
     * 
     * @type {ConnectionStatus}
     * @memberof ConnectionSearch
     */
    status?: ConnectionStatus;
    /**
     * 
     * @type {SourceSearch}
     * @memberof ConnectionSearch
     */
    source?: SourceSearch;
    /**
     * 
     * @type {DestinationSearch}
     * @memberof ConnectionSearch
     */
    destination?: DestinationSearch;
}

export function ConnectionSearchFromJSON(json: any): ConnectionSearch {
    return ConnectionSearchFromJSONTyped(json, false);
}

export function ConnectionSearchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionSearch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connectionId': !exists(json, 'connectionId') ? undefined : json['connectionId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespaceDefinition': !exists(json, 'namespaceDefinition') ? undefined : NamespaceDefinitionTypeFromJSON(json['namespaceDefinition']),
        'namespaceFormat': !exists(json, 'namespaceFormat') ? undefined : json['namespaceFormat'],
        'prefix': !exists(json, 'prefix') ? undefined : json['prefix'],
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
        'destinationId': !exists(json, 'destinationId') ? undefined : json['destinationId'],
        'schedule': !exists(json, 'schedule') ? undefined : ConnectionScheduleFromJSON(json['schedule']),
        'status': !exists(json, 'status') ? undefined : ConnectionStatusFromJSON(json['status']),
        'source': !exists(json, 'source') ? undefined : SourceSearchFromJSON(json['source']),
        'destination': !exists(json, 'destination') ? undefined : DestinationSearchFromJSON(json['destination']),
    };
}

export function ConnectionSearchToJSON(value?: ConnectionSearch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connectionId': value.connectionId,
        'name': value.name,
        'namespaceDefinition': NamespaceDefinitionTypeToJSON(value.namespaceDefinition),
        'namespaceFormat': value.namespaceFormat,
        'prefix': value.prefix,
        'sourceId': value.sourceId,
        'destinationId': value.destinationId,
        'schedule': ConnectionScheduleToJSON(value.schedule),
        'status': ConnectionStatusToJSON(value.status),
        'source': SourceSearchToJSON(value.source),
        'destination': DestinationSearchToJSON(value.destination),
    };
}

