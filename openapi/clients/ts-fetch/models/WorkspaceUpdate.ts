/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Notification,
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';

/**
 * 
 * @export
 * @interface WorkspaceUpdate
 */
export interface WorkspaceUpdate {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUpdate
     */
    workspaceId: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUpdate
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceUpdate
     */
    initialSetupComplete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceUpdate
     */
    displaySetupWizard?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceUpdate
     */
    anonymousDataCollection: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceUpdate
     */
    news: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceUpdate
     */
    securityUpdates: boolean;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof WorkspaceUpdate
     */
    notifications?: Array<Notification>;
}

export function WorkspaceUpdateFromJSON(json: any): WorkspaceUpdate {
    return WorkspaceUpdateFromJSONTyped(json, false);
}

export function WorkspaceUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workspaceId': json['workspaceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'initialSetupComplete': json['initialSetupComplete'],
        'displaySetupWizard': !exists(json, 'displaySetupWizard') ? undefined : json['displaySetupWizard'],
        'anonymousDataCollection': json['anonymousDataCollection'],
        'news': json['news'],
        'securityUpdates': json['securityUpdates'],
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
    };
}

export function WorkspaceUpdateToJSON(value?: WorkspaceUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workspaceId': value.workspaceId,
        'email': value.email,
        'initialSetupComplete': value.initialSetupComplete,
        'displaySetupWizard': value.displaySetupWizard,
        'anonymousDataCollection': value.anonymousDataCollection,
        'news': value.news,
        'securityUpdates': value.securityUpdates,
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(NotificationToJSON)),
    };
}

