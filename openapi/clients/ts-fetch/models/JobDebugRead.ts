/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DestinationDefinitionRead,
    DestinationDefinitionReadFromJSON,
    DestinationDefinitionReadFromJSONTyped,
    DestinationDefinitionReadToJSON,
} from './DestinationDefinitionRead';
import {
    JobConfigType,
    JobConfigTypeFromJSON,
    JobConfigTypeFromJSONTyped,
    JobConfigTypeToJSON,
} from './JobConfigType';
import {
    JobStatus,
    JobStatusFromJSON,
    JobStatusFromJSONTyped,
    JobStatusToJSON,
} from './JobStatus';
import {
    SourceDefinitionRead,
    SourceDefinitionReadFromJSON,
    SourceDefinitionReadFromJSONTyped,
    SourceDefinitionReadToJSON,
} from './SourceDefinitionRead';

/**
 * 
 * @export
 * @interface JobDebugRead
 */
export interface JobDebugRead {
    /**
     * 
     * @type {number}
     * @memberof JobDebugRead
     */
    id: number;
    /**
     * 
     * @type {JobConfigType}
     * @memberof JobDebugRead
     */
    configType: JobConfigType;
    /**
     * 
     * @type {string}
     * @memberof JobDebugRead
     */
    configId: string;
    /**
     * 
     * @type {JobStatus}
     * @memberof JobDebugRead
     */
    status: JobStatus;
    /**
     * 
     * @type {string}
     * @memberof JobDebugRead
     */
    airbyteVersion: string;
    /**
     * 
     * @type {SourceDefinitionRead}
     * @memberof JobDebugRead
     */
    sourceDefinition: SourceDefinitionRead;
    /**
     * 
     * @type {DestinationDefinitionRead}
     * @memberof JobDebugRead
     */
    destinationDefinition: DestinationDefinitionRead;
}

export function JobDebugReadFromJSON(json: any): JobDebugRead {
    return JobDebugReadFromJSONTyped(json, false);
}

export function JobDebugReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobDebugRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'configType': JobConfigTypeFromJSON(json['configType']),
        'configId': json['configId'],
        'status': JobStatusFromJSON(json['status']),
        'airbyteVersion': json['airbyteVersion'],
        'sourceDefinition': SourceDefinitionReadFromJSON(json['sourceDefinition']),
        'destinationDefinition': DestinationDefinitionReadFromJSON(json['destinationDefinition']),
    };
}

export function JobDebugReadToJSON(value?: JobDebugRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'configType': JobConfigTypeToJSON(value.configType),
        'configId': value.configId,
        'status': JobStatusToJSON(value.status),
        'airbyteVersion': value.airbyteVersion,
        'sourceDefinition': SourceDefinitionReadToJSON(value.sourceDefinition),
        'destinationDefinition': DestinationDefinitionReadToJSON(value.destinationDefinition),
    };
}

