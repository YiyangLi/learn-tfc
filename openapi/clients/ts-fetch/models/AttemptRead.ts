/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AttemptFailureSummary,
    AttemptFailureSummaryFromJSON,
    AttemptFailureSummaryFromJSONTyped,
    AttemptFailureSummaryToJSON,
} from './AttemptFailureSummary';
import {
    AttemptStats,
    AttemptStatsFromJSON,
    AttemptStatsFromJSONTyped,
    AttemptStatsToJSON,
} from './AttemptStats';
import {
    AttemptStatus,
    AttemptStatusFromJSON,
    AttemptStatusFromJSONTyped,
    AttemptStatusToJSON,
} from './AttemptStatus';
import {
    AttemptStreamStats,
    AttemptStreamStatsFromJSON,
    AttemptStreamStatsFromJSONTyped,
    AttemptStreamStatsToJSON,
} from './AttemptStreamStats';

/**
 * 
 * @export
 * @interface AttemptRead
 */
export interface AttemptRead {
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    id: number;
    /**
     * 
     * @type {AttemptStatus}
     * @memberof AttemptRead
     */
    status: AttemptStatus;
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    createdAt: number;
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    updatedAt: number;
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    endedAt?: number;
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    bytesSynced?: number;
    /**
     * 
     * @type {number}
     * @memberof AttemptRead
     */
    recordsSynced?: number;
    /**
     * 
     * @type {AttemptStats}
     * @memberof AttemptRead
     */
    totalStats?: AttemptStats;
    /**
     * 
     * @type {Array<AttemptStreamStats>}
     * @memberof AttemptRead
     */
    streamStats?: Array<AttemptStreamStats>;
    /**
     * 
     * @type {AttemptFailureSummary}
     * @memberof AttemptRead
     */
    failureSummary?: AttemptFailureSummary;
}

export function AttemptReadFromJSON(json: any): AttemptRead {
    return AttemptReadFromJSONTyped(json, false);
}

export function AttemptReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttemptRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': AttemptStatusFromJSON(json['status']),
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'endedAt': !exists(json, 'endedAt') ? undefined : json['endedAt'],
        'bytesSynced': !exists(json, 'bytesSynced') ? undefined : json['bytesSynced'],
        'recordsSynced': !exists(json, 'recordsSynced') ? undefined : json['recordsSynced'],
        'totalStats': !exists(json, 'totalStats') ? undefined : AttemptStatsFromJSON(json['totalStats']),
        'streamStats': !exists(json, 'streamStats') ? undefined : ((json['streamStats'] as Array<any>).map(AttemptStreamStatsFromJSON)),
        'failureSummary': !exists(json, 'failureSummary') ? undefined : AttemptFailureSummaryFromJSON(json['failureSummary']),
    };
}

export function AttemptReadToJSON(value?: AttemptRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': AttemptStatusToJSON(value.status),
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'endedAt': value.endedAt,
        'bytesSynced': value.bytesSynced,
        'recordsSynced': value.recordsSynced,
        'totalStats': AttemptStatsToJSON(value.totalStats),
        'streamStats': value.streamStats === undefined ? undefined : ((value.streamStats as Array<any>).map(AttemptStreamStatsToJSON)),
        'failureSummary': AttemptFailureSummaryToJSON(value.failureSummary),
    };
}

