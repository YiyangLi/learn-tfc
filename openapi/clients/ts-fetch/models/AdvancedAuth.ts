/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OAuthConfigSpecification,
    OAuthConfigSpecificationFromJSON,
    OAuthConfigSpecificationFromJSONTyped,
    OAuthConfigSpecificationToJSON,
} from './OAuthConfigSpecification';

/**
 * 
 * @export
 * @interface AdvancedAuth
 */
export interface AdvancedAuth {
    /**
     * 
     * @type {string}
     * @memberof AdvancedAuth
     */
    authFlowType?: AdvancedAuthAuthFlowTypeEnum;
    /**
     * Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
     * @type {Array<string>}
     * @memberof AdvancedAuth
     */
    predicateKey?: Array<string>;
    /**
     * Value of the predicate_key fields for the advanced auth to be applicable.
     * @type {string}
     * @memberof AdvancedAuth
     */
    predicateValue?: string;
    /**
     * 
     * @type {OAuthConfigSpecification}
     * @memberof AdvancedAuth
     */
    oauthConfigSpecification?: OAuthConfigSpecification;
}


/**
 * @export
 */
export const AdvancedAuthAuthFlowTypeEnum = {
    Oauth20: 'oauth2.0',
    Oauth10: 'oauth1.0'
} as const;
export type AdvancedAuthAuthFlowTypeEnum = typeof AdvancedAuthAuthFlowTypeEnum[keyof typeof AdvancedAuthAuthFlowTypeEnum];


export function AdvancedAuthFromJSON(json: any): AdvancedAuth {
    return AdvancedAuthFromJSONTyped(json, false);
}

export function AdvancedAuthFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdvancedAuth {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authFlowType': !exists(json, 'authFlowType') ? undefined : json['authFlowType'],
        'predicateKey': !exists(json, 'predicateKey') ? undefined : json['predicateKey'],
        'predicateValue': !exists(json, 'predicateValue') ? undefined : json['predicateValue'],
        'oauthConfigSpecification': !exists(json, 'oauthConfigSpecification') ? undefined : OAuthConfigSpecificationFromJSON(json['oauthConfigSpecification']),
    };
}

export function AdvancedAuthToJSON(value?: AdvancedAuth | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authFlowType': value.authFlowType,
        'predicateKey': value.predicateKey,
        'predicateValue': value.predicateValue,
        'oauthConfigSpecification': OAuthConfigSpecificationToJSON(value.oauthConfigSpecification),
    };
}

