/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    WebBackendConnectionCreate,
    WebBackendConnectionCreateFromJSON,
    WebBackendConnectionCreateToJSON,
    WebBackendConnectionRead,
    WebBackendConnectionReadFromJSON,
    WebBackendConnectionReadToJSON,
    WebBackendConnectionReadList,
    WebBackendConnectionReadListFromJSON,
    WebBackendConnectionReadListToJSON,
    WebBackendConnectionRequestBody,
    WebBackendConnectionRequestBodyFromJSON,
    WebBackendConnectionRequestBodyToJSON,
    WebBackendConnectionSearch,
    WebBackendConnectionSearchFromJSON,
    WebBackendConnectionSearchToJSON,
    WebBackendConnectionUpdate,
    WebBackendConnectionUpdateFromJSON,
    WebBackendConnectionUpdateToJSON,
    WebBackendWorkspaceState,
    WebBackendWorkspaceStateFromJSON,
    WebBackendWorkspaceStateToJSON,
    WebBackendWorkspaceStateResult,
    WebBackendWorkspaceStateResultFromJSON,
    WebBackendWorkspaceStateResultToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface WebBackendCreateConnectionRequest {
    webBackendConnectionCreate: WebBackendConnectionCreate;
}

export interface WebBackendGetConnectionRequest {
    webBackendConnectionRequestBody: WebBackendConnectionRequestBody;
}

export interface WebBackendGetWorkspaceStateRequest {
    webBackendWorkspaceState?: WebBackendWorkspaceState;
}

export interface WebBackendListAllConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface WebBackendListConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface WebBackendSearchConnectionsRequest {
    webBackendConnectionSearch: WebBackendConnectionSearch;
}

export interface WebBackendUpdateConnectionRequest {
    webBackendConnectionUpdate: WebBackendConnectionUpdate;
}

/**
 * 
 */
export class WebBackendApi extends runtime.BaseAPI {

    /**
     * Create a connection
     */
    async webBackendCreateConnectionRaw(requestParameters: WebBackendCreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionRead>> {
        if (requestParameters.webBackendConnectionCreate === null || requestParameters.webBackendConnectionCreate === undefined) {
            throw new runtime.RequiredError('webBackendConnectionCreate','Required parameter requestParameters.webBackendConnectionCreate was null or undefined when calling webBackendCreateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebBackendConnectionCreateToJSON(requestParameters.webBackendConnectionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadFromJSON(jsonValue));
    }

    /**
     * Create a connection
     */
    async webBackendCreateConnection(requestParameters: WebBackendCreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionRead> {
        const response = await this.webBackendCreateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a connection
     */
    async webBackendGetConnectionRaw(requestParameters: WebBackendGetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionRead>> {
        if (requestParameters.webBackendConnectionRequestBody === null || requestParameters.webBackendConnectionRequestBody === undefined) {
            throw new runtime.RequiredError('webBackendConnectionRequestBody','Required parameter requestParameters.webBackendConnectionRequestBody was null or undefined when calling webBackendGetConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebBackendConnectionRequestBodyToJSON(requestParameters.webBackendConnectionRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadFromJSON(jsonValue));
    }

    /**
     * Get a connection
     */
    async webBackendGetConnection(requestParameters: WebBackendGetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionRead> {
        const response = await this.webBackendGetConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current state of a workspace
     */
    async webBackendGetWorkspaceStateRaw(requestParameters: WebBackendGetWorkspaceStateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendWorkspaceStateResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/workspace/state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebBackendWorkspaceStateToJSON(requestParameters.webBackendWorkspaceState),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendWorkspaceStateResultFromJSON(jsonValue));
    }

    /**
     * Returns the current state of a workspace
     */
    async webBackendGetWorkspaceState(requestParameters: WebBackendGetWorkspaceStateRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendWorkspaceStateResult> {
        const response = await this.webBackendGetWorkspaceStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all connections for a workspace.
     */
    async webBackendListAllConnectionsForWorkspaceRaw(requestParameters: WebBackendListAllConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling webBackendListAllConnectionsForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/list_all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadListFromJSON(jsonValue));
    }

    /**
     * Returns all connections for a workspace.
     */
    async webBackendListAllConnectionsForWorkspace(requestParameters: WebBackendListAllConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionReadList> {
        const response = await this.webBackendListAllConnectionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all non-deleted connections for a workspace.
     */
    async webBackendListConnectionsForWorkspaceRaw(requestParameters: WebBackendListConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling webBackendListConnectionsForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadListFromJSON(jsonValue));
    }

    /**
     * Returns all non-deleted connections for a workspace.
     */
    async webBackendListConnectionsForWorkspace(requestParameters: WebBackendListConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionReadList> {
        const response = await this.webBackendListConnectionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search connections
     */
    async webBackendSearchConnectionsRaw(requestParameters: WebBackendSearchConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionReadList>> {
        if (requestParameters.webBackendConnectionSearch === null || requestParameters.webBackendConnectionSearch === undefined) {
            throw new runtime.RequiredError('webBackendConnectionSearch','Required parameter requestParameters.webBackendConnectionSearch was null or undefined when calling webBackendSearchConnections.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebBackendConnectionSearchToJSON(requestParameters.webBackendConnectionSearch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadListFromJSON(jsonValue));
    }

    /**
     * Search connections
     */
    async webBackendSearchConnections(requestParameters: WebBackendSearchConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionReadList> {
        const response = await this.webBackendSearchConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a connection
     */
    async webBackendUpdateConnectionRaw(requestParameters: WebBackendUpdateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WebBackendConnectionRead>> {
        if (requestParameters.webBackendConnectionUpdate === null || requestParameters.webBackendConnectionUpdate === undefined) {
            throw new runtime.RequiredError('webBackendConnectionUpdate','Required parameter requestParameters.webBackendConnectionUpdate was null or undefined when calling webBackendUpdateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/web_backend/connections/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebBackendConnectionUpdateToJSON(requestParameters.webBackendConnectionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebBackendConnectionReadFromJSON(jsonValue));
    }

    /**
     * Update a connection
     */
    async webBackendUpdateConnection(requestParameters: WebBackendUpdateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WebBackendConnectionRead> {
        const response = await this.webBackendUpdateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
