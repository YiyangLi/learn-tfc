/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomSourceDefinitionCreate,
    CustomSourceDefinitionCreateFromJSON,
    CustomSourceDefinitionCreateToJSON,
    CustomSourceDefinitionUpdate,
    CustomSourceDefinitionUpdateFromJSON,
    CustomSourceDefinitionUpdateToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    PrivateSourceDefinitionRead,
    PrivateSourceDefinitionReadFromJSON,
    PrivateSourceDefinitionReadToJSON,
    PrivateSourceDefinitionReadList,
    PrivateSourceDefinitionReadListFromJSON,
    PrivateSourceDefinitionReadListToJSON,
    SourceDefinitionCreate,
    SourceDefinitionCreateFromJSON,
    SourceDefinitionCreateToJSON,
    SourceDefinitionIdRequestBody,
    SourceDefinitionIdRequestBodyFromJSON,
    SourceDefinitionIdRequestBodyToJSON,
    SourceDefinitionIdWithWorkspaceId,
    SourceDefinitionIdWithWorkspaceIdFromJSON,
    SourceDefinitionIdWithWorkspaceIdToJSON,
    SourceDefinitionRead,
    SourceDefinitionReadFromJSON,
    SourceDefinitionReadToJSON,
    SourceDefinitionReadList,
    SourceDefinitionReadListFromJSON,
    SourceDefinitionReadListToJSON,
    SourceDefinitionUpdate,
    SourceDefinitionUpdateFromJSON,
    SourceDefinitionUpdateToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CreateCustomSourceDefinitionRequest {
    customSourceDefinitionCreate?: CustomSourceDefinitionCreate;
}

export interface CreateSourceDefinitionRequest {
    sourceDefinitionCreate?: SourceDefinitionCreate;
}

export interface DeleteCustomSourceDefinitionRequest {
    sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId;
}

export interface DeleteSourceDefinitionRequest {
    sourceDefinitionIdRequestBody: SourceDefinitionIdRequestBody;
}

export interface GetSourceDefinitionRequest {
    sourceDefinitionIdRequestBody: SourceDefinitionIdRequestBody;
}

export interface GetSourceDefinitionForWorkspaceRequest {
    sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId;
}

export interface GrantSourceDefinitionToWorkspaceRequest {
    sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId;
}

export interface ListPrivateSourceDefinitionsRequest {
    workspaceIdRequestBody?: WorkspaceIdRequestBody;
}

export interface ListSourceDefinitionsForWorkspaceRequest {
    workspaceIdRequestBody?: WorkspaceIdRequestBody;
}

export interface RevokeSourceDefinitionFromWorkspaceRequest {
    sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId;
}

export interface UpdateCustomSourceDefinitionRequest {
    customSourceDefinitionUpdate?: CustomSourceDefinitionUpdate;
}

export interface UpdateSourceDefinitionRequest {
    sourceDefinitionUpdate?: SourceDefinitionUpdate;
}

/**
 * 
 */
export class SourceDefinitionApi extends runtime.BaseAPI {

    /**
     * Creates a custom sourceDefinition for the given workspace
     */
    async createCustomSourceDefinitionRaw(requestParameters: CreateCustomSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/create_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomSourceDefinitionCreateToJSON(requestParameters.customSourceDefinitionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Creates a custom sourceDefinition for the given workspace
     */
    async createCustomSourceDefinition(requestParameters: CreateCustomSourceDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.createCustomSourceDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a sourceDefinition
     */
    async createSourceDefinitionRaw(requestParameters: CreateSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionCreateToJSON(requestParameters.sourceDefinitionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Creates a sourceDefinition
     */
    async createSourceDefinition(requestParameters: CreateSourceDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.createSourceDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a custom source definition for the given workspace
     */
    async deleteCustomSourceDefinitionRaw(requestParameters: DeleteCustomSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceDefinitionIdWithWorkspaceId === null || requestParameters.sourceDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdWithWorkspaceId','Required parameter requestParameters.sourceDefinitionIdWithWorkspaceId was null or undefined when calling deleteCustomSourceDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/delete_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdWithWorkspaceIdToJSON(requestParameters.sourceDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom source definition for the given workspace
     */
    async deleteCustomSourceDefinition(requestParameters: DeleteCustomSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteCustomSourceDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a source definition
     */
    async deleteSourceDefinitionRaw(requestParameters: DeleteSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceDefinitionIdRequestBody === null || requestParameters.sourceDefinitionIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdRequestBody','Required parameter requestParameters.sourceDefinitionIdRequestBody was null or undefined when calling deleteSourceDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdRequestBodyToJSON(requestParameters.sourceDefinitionIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a source definition
     */
    async deleteSourceDefinition(requestParameters: DeleteSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteSourceDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Get source
     */
    async getSourceDefinitionRaw(requestParameters: GetSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        if (requestParameters.sourceDefinitionIdRequestBody === null || requestParameters.sourceDefinitionIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdRequestBody','Required parameter requestParameters.sourceDefinitionIdRequestBody was null or undefined when calling getSourceDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdRequestBodyToJSON(requestParameters.sourceDefinitionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Get source
     */
    async getSourceDefinition(requestParameters: GetSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.getSourceDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a sourceDefinition that is configured for the given workspace
     */
    async getSourceDefinitionForWorkspaceRaw(requestParameters: GetSourceDefinitionForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        if (requestParameters.sourceDefinitionIdWithWorkspaceId === null || requestParameters.sourceDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdWithWorkspaceId','Required parameter requestParameters.sourceDefinitionIdWithWorkspaceId was null or undefined when calling getSourceDefinitionForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/get_for_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdWithWorkspaceIdToJSON(requestParameters.sourceDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Get a sourceDefinition that is configured for the given workspace
     */
    async getSourceDefinitionForWorkspace(requestParameters: GetSourceDefinitionForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.getSourceDefinitionForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * grant a private, non-custom sourceDefinition to a given workspace
     */
    async grantSourceDefinitionToWorkspaceRaw(requestParameters: GrantSourceDefinitionToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PrivateSourceDefinitionRead>> {
        if (requestParameters.sourceDefinitionIdWithWorkspaceId === null || requestParameters.sourceDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdWithWorkspaceId','Required parameter requestParameters.sourceDefinitionIdWithWorkspaceId was null or undefined when calling grantSourceDefinitionToWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/grant_definition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdWithWorkspaceIdToJSON(requestParameters.sourceDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateSourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * grant a private, non-custom sourceDefinition to a given workspace
     */
    async grantSourceDefinitionToWorkspace(requestParameters: GrantSourceDefinitionToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PrivateSourceDefinitionRead> {
        const response = await this.grantSourceDefinitionToWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Guaranteed to retrieve the latest information on supported sources.
     * List the latest sourceDefinitions Airbyte supports
     */
    async listLatestSourceDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/source_definitions/list_latest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * Guaranteed to retrieve the latest information on supported sources.
     * List the latest sourceDefinitions Airbyte supports
     */
    async listLatestSourceDefinitions(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionReadList> {
        const response = await this.listLatestSourceDefinitionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace\'s grants.
     */
    async listPrivateSourceDefinitionsRaw(requestParameters: ListPrivateSourceDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PrivateSourceDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/list_private`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateSourceDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace\'s grants.
     */
    async listPrivateSourceDefinitions(requestParameters: ListPrivateSourceDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PrivateSourceDefinitionReadList> {
        const response = await this.listPrivateSourceDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use
     */
    async listSourceDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/source_definitions/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all the sourceDefinitions the current Airbyte deployment is configured to use
     */
    async listSourceDefinitions(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionReadList> {
        const response = await this.listSourceDefinitionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all the sourceDefinitions the given workspace is configured to use
     */
    async listSourceDefinitionsForWorkspaceRaw(requestParameters: ListSourceDefinitionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/list_for_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all the sourceDefinitions the given workspace is configured to use
     */
    async listSourceDefinitionsForWorkspace(requestParameters: ListSourceDefinitionsForWorkspaceRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionReadList> {
        const response = await this.listSourceDefinitionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace
     */
    async revokeSourceDefinitionFromWorkspaceRaw(requestParameters: RevokeSourceDefinitionFromWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceDefinitionIdWithWorkspaceId === null || requestParameters.sourceDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('sourceDefinitionIdWithWorkspaceId','Required parameter requestParameters.sourceDefinitionIdWithWorkspaceId was null or undefined when calling revokeSourceDefinitionFromWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/revoke_definition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionIdWithWorkspaceIdToJSON(requestParameters.sourceDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * revoke a grant to a private, non-custom sourceDefinition from a given workspace
     */
    async revokeSourceDefinitionFromWorkspace(requestParameters: RevokeSourceDefinitionFromWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.revokeSourceDefinitionFromWorkspaceRaw(requestParameters, initOverrides);
    }

    /**
     * Update a custom sourceDefinition for the given workspace
     */
    async updateCustomSourceDefinitionRaw(requestParameters: UpdateCustomSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/update_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomSourceDefinitionUpdateToJSON(requestParameters.customSourceDefinitionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Update a custom sourceDefinition for the given workspace
     */
    async updateCustomSourceDefinition(requestParameters: UpdateCustomSourceDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.updateCustomSourceDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a sourceDefinition
     */
    async updateSourceDefinitionRaw(requestParameters: UpdateSourceDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/source_definitions/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDefinitionUpdateToJSON(requestParameters.sourceDefinitionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Update a sourceDefinition
     */
    async updateSourceDefinition(requestParameters: UpdateSourceDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDefinitionRead> {
        const response = await this.updateSourceDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
