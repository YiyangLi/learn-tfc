/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ImportRead,
    ImportReadFromJSON,
    ImportReadToJSON,
    ImportRequestBody,
    ImportRequestBodyFromJSON,
    ImportRequestBodyToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    UploadRead,
    UploadReadFromJSON,
    UploadReadToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface ExportWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface ImportArchiveRequest {
    body: Blob;
}

export interface ImportIntoWorkspaceRequest {
    importRequestBody: ImportRequestBody;
}

export interface UploadArchiveResourceRequest {
    body: Blob;
}

/**
 * 
 */
export class DeploymentApi extends runtime.BaseAPI {

    /**
     * Export Airbyte Configuration and Data Archive
     */
    async exportArchiveRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/deployment/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Export Airbyte Configuration and Data Archive
     */
    async exportArchive(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Blob> {
        const response = await this.exportArchiveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Export Airbyte Workspace Configuration
     */
    async exportWorkspaceRaw(requestParameters: ExportWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling exportWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/deployment/export_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Export Airbyte Workspace Configuration
     */
    async exportWorkspace(requestParameters: ExportWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Blob> {
        const response = await this.exportWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import Airbyte Configuration and Data Archive
     */
    async importArchiveRaw(requestParameters: ImportArchiveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ImportRead>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling importArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-gzip';

        const response = await this.request({
            path: `/v1/deployment/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportReadFromJSON(jsonValue));
    }

    /**
     * Import Airbyte Configuration and Data Archive
     */
    async importArchive(requestParameters: ImportArchiveRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ImportRead> {
        const response = await this.importArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import Airbyte Configuration into Workspace (this operation might change ids of imported configurations). Note, in order to use this api endpoint, you might need to upload a temporary archive resource with \'deployment/upload_archive_resource\' first 
     */
    async importIntoWorkspaceRaw(requestParameters: ImportIntoWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ImportRead>> {
        if (requestParameters.importRequestBody === null || requestParameters.importRequestBody === undefined) {
            throw new runtime.RequiredError('importRequestBody','Required parameter requestParameters.importRequestBody was null or undefined when calling importIntoWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/deployment/import_into_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportRequestBodyToJSON(requestParameters.importRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportReadFromJSON(jsonValue));
    }

    /**
     * Import Airbyte Configuration into Workspace (this operation might change ids of imported configurations). Note, in order to use this api endpoint, you might need to upload a temporary archive resource with \'deployment/upload_archive_resource\' first 
     */
    async importIntoWorkspace(requestParameters: ImportIntoWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ImportRead> {
        const response = await this.importIntoWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a GZIP archive tarball and stage it in the server\'s cache as a temporary resource
     */
    async uploadArchiveResourceRaw(requestParameters: UploadArchiveResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UploadRead>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling uploadArchiveResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-gzip';

        const response = await this.request({
            path: `/v1/deployment/upload_archive_resource`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadReadFromJSON(jsonValue));
    }

    /**
     * Upload a GZIP archive tarball and stage it in the server\'s cache as a temporary resource
     */
    async uploadArchiveResource(requestParameters: UploadArchiveResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UploadRead> {
        const response = await this.uploadArchiveResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
