/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    SlugRequestBody,
    SlugRequestBodyFromJSON,
    SlugRequestBodyToJSON,
    WorkspaceCreate,
    WorkspaceCreateFromJSON,
    WorkspaceCreateToJSON,
    WorkspaceGiveFeedback,
    WorkspaceGiveFeedbackFromJSON,
    WorkspaceGiveFeedbackToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
    WorkspaceRead,
    WorkspaceReadFromJSON,
    WorkspaceReadToJSON,
    WorkspaceReadList,
    WorkspaceReadListFromJSON,
    WorkspaceReadListToJSON,
    WorkspaceUpdate,
    WorkspaceUpdateFromJSON,
    WorkspaceUpdateToJSON,
    WorkspaceUpdateName,
    WorkspaceUpdateNameFromJSON,
    WorkspaceUpdateNameToJSON,
} from '../models';

export interface CreateWorkspaceRequest {
    workspaceCreate: WorkspaceCreate;
}

export interface DeleteWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface GetWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface GetWorkspaceBySlugRequest {
    slugRequestBody: SlugRequestBody;
}

export interface UpdateWorkspaceRequest {
    workspaceUpdate: WorkspaceUpdate;
}

export interface UpdateWorkspaceFeedbackRequest {
    workspaceGiveFeedback: WorkspaceGiveFeedback;
}

export interface UpdateWorkspaceNameRequest {
    workspaceUpdateName: WorkspaceUpdateName;
}

/**
 * 
 */
export class WorkspaceApi extends runtime.BaseAPI {

    /**
     * Creates a workspace
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceRead>> {
        if (requestParameters.workspaceCreate === null || requestParameters.workspaceCreate === undefined) {
            throw new runtime.RequiredError('workspaceCreate','Required parameter requestParameters.workspaceCreate was null or undefined when calling createWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceCreateToJSON(requestParameters.workspaceCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadFromJSON(jsonValue));
    }

    /**
     * Creates a workspace
     */
    async createWorkspace(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceRead> {
        const response = await this.createWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a workspace
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling deleteWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a workspace
     */
    async deleteWorkspace(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteWorkspaceRaw(requestParameters, initOverrides);
    }

    /**
     * Find workspace by ID
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceRead>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling getWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadFromJSON(jsonValue));
    }

    /**
     * Find workspace by ID
     */
    async getWorkspace(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceRead> {
        const response = await this.getWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find workspace by slug
     */
    async getWorkspaceBySlugRaw(requestParameters: GetWorkspaceBySlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceRead>> {
        if (requestParameters.slugRequestBody === null || requestParameters.slugRequestBody === undefined) {
            throw new runtime.RequiredError('slugRequestBody','Required parameter requestParameters.slugRequestBody was null or undefined when calling getWorkspaceBySlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/get_by_slug`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SlugRequestBodyToJSON(requestParameters.slugRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadFromJSON(jsonValue));
    }

    /**
     * Find workspace by slug
     */
    async getWorkspaceBySlug(requestParameters: GetWorkspaceBySlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceRead> {
        const response = await this.getWorkspaceBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workspaces registered in the current Airbyte deployment
     */
    async listWorkspacesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/workspaces/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadListFromJSON(jsonValue));
    }

    /**
     * List all workspaces registered in the current Airbyte deployment
     */
    async listWorkspaces(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceReadList> {
        const response = await this.listWorkspacesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update workspace state
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceRead>> {
        if (requestParameters.workspaceUpdate === null || requestParameters.workspaceUpdate === undefined) {
            throw new runtime.RequiredError('workspaceUpdate','Required parameter requestParameters.workspaceUpdate was null or undefined when calling updateWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceUpdateToJSON(requestParameters.workspaceUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadFromJSON(jsonValue));
    }

    /**
     * Update workspace state
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceRead> {
        const response = await this.updateWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update workspace feedback state
     */
    async updateWorkspaceFeedbackRaw(requestParameters: UpdateWorkspaceFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workspaceGiveFeedback === null || requestParameters.workspaceGiveFeedback === undefined) {
            throw new runtime.RequiredError('workspaceGiveFeedback','Required parameter requestParameters.workspaceGiveFeedback was null or undefined when calling updateWorkspaceFeedback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/tag_feedback_status_as_done`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceGiveFeedbackToJSON(requestParameters.workspaceGiveFeedback),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update workspace feedback state
     */
    async updateWorkspaceFeedback(requestParameters: UpdateWorkspaceFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.updateWorkspaceFeedbackRaw(requestParameters, initOverrides);
    }

    /**
     * Update workspace name
     */
    async updateWorkspaceNameRaw(requestParameters: UpdateWorkspaceNameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<WorkspaceRead>> {
        if (requestParameters.workspaceUpdateName === null || requestParameters.workspaceUpdateName === undefined) {
            throw new runtime.RequiredError('workspaceUpdateName','Required parameter requestParameters.workspaceUpdateName was null or undefined when calling updateWorkspaceName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/update_name`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceUpdateNameToJSON(requestParameters.workspaceUpdateName),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceReadFromJSON(jsonValue));
    }

    /**
     * Update workspace name
     */
    async updateWorkspaceName(requestParameters: UpdateWorkspaceNameRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<WorkspaceRead> {
        const response = await this.updateWorkspaceNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
