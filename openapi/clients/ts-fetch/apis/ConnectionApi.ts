/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConnectionCreate,
    ConnectionCreateFromJSON,
    ConnectionCreateToJSON,
    ConnectionIdRequestBody,
    ConnectionIdRequestBodyFromJSON,
    ConnectionIdRequestBodyToJSON,
    ConnectionRead,
    ConnectionReadFromJSON,
    ConnectionReadToJSON,
    ConnectionReadList,
    ConnectionReadListFromJSON,
    ConnectionReadListToJSON,
    ConnectionSearch,
    ConnectionSearchFromJSON,
    ConnectionSearchToJSON,
    ConnectionState,
    ConnectionStateFromJSON,
    ConnectionStateToJSON,
    ConnectionStateType,
    ConnectionStateTypeFromJSON,
    ConnectionStateTypeToJSON,
    ConnectionUpdate,
    ConnectionUpdateFromJSON,
    ConnectionUpdateToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    JobInfoRead,
    JobInfoReadFromJSON,
    JobInfoReadToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CreateConnectionRequest {
    connectionCreate: ConnectionCreate;
}

export interface DeleteConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetStateRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface GetStateTypeRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface ListAllConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface ListConnectionsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface ResetConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface SearchConnectionsRequest {
    connectionSearch: ConnectionSearch;
}

export interface SyncConnectionRequest {
    connectionIdRequestBody: ConnectionIdRequestBody;
}

export interface UpdateConnectionRequest {
    connectionUpdate: ConnectionUpdate;
}

/**
 * 
 */
export class ConnectionApi extends runtime.BaseAPI {

    /**
     * Create a connection between a source and a destination
     */
    async createConnectionRaw(requestParameters: CreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionRead>> {
        if (requestParameters.connectionCreate === null || requestParameters.connectionCreate === undefined) {
            throw new runtime.RequiredError('connectionCreate','Required parameter requestParameters.connectionCreate was null or undefined when calling createConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionCreateToJSON(requestParameters.connectionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadFromJSON(jsonValue));
    }

    /**
     * Create a connection between a source and a destination
     */
    async createConnection(requestParameters: CreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionRead> {
        const response = await this.createConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a connection
     */
    async deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling deleteConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a connection
     */
    async deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * Get a connection
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionRead>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadFromJSON(jsonValue));
    }

    /**
     * Get a connection
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionRead> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the current state for a connection.
     */
    async getStateRaw(requestParameters: GetStateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionState>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/state/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionStateFromJSON(jsonValue));
    }

    /**
     * Fetch the current state for a connection.
     */
    async getState(requestParameters: GetStateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionState> {
        const response = await this.getStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the current type for a connection.
     */
    async getStateTypeRaw(requestParameters: GetStateTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionStateType>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling getStateType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/state/type/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionStateTypeFromJSON(jsonValue));
    }

    /**
     * Fetch the current type for a connection.
     */
    async getStateType(requestParameters: GetStateTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionStateType> {
        const response = await this.getStateTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List connections for workspace, including deleted connections.
     * Returns all connections for a workspace, including deleted connections.
     */
    async listAllConnectionsForWorkspaceRaw(requestParameters: ListAllConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listAllConnectionsForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/list_all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadListFromJSON(jsonValue));
    }

    /**
     * List connections for workspace, including deleted connections.
     * Returns all connections for a workspace, including deleted connections.
     */
    async listAllConnectionsForWorkspace(requestParameters: ListAllConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionReadList> {
        const response = await this.listAllConnectionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List connections for workspace. Does not return deleted connections.
     * Returns all connections for a workspace.
     */
    async listConnectionsForWorkspaceRaw(requestParameters: ListConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listConnectionsForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadListFromJSON(jsonValue));
    }

    /**
     * List connections for workspace. Does not return deleted connections.
     * Returns all connections for a workspace.
     */
    async listConnectionsForWorkspace(requestParameters: ListConnectionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionReadList> {
        const response = await this.listConnectionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     */
    async resetConnectionRaw(requestParameters: ResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<JobInfoRead>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling resetConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobInfoReadFromJSON(jsonValue));
    }

    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     */
    async resetConnection(requestParameters: ResetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<JobInfoRead> {
        const response = await this.resetConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search connections
     */
    async searchConnectionsRaw(requestParameters: SearchConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionReadList>> {
        if (requestParameters.connectionSearch === null || requestParameters.connectionSearch === undefined) {
            throw new runtime.RequiredError('connectionSearch','Required parameter requestParameters.connectionSearch was null or undefined when calling searchConnections.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionSearchToJSON(requestParameters.connectionSearch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadListFromJSON(jsonValue));
    }

    /**
     * Search connections
     */
    async searchConnections(requestParameters: SearchConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionReadList> {
        const response = await this.searchConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a manual sync of the connection
     */
    async syncConnectionRaw(requestParameters: SyncConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<JobInfoRead>> {
        if (requestParameters.connectionIdRequestBody === null || requestParameters.connectionIdRequestBody === undefined) {
            throw new runtime.RequiredError('connectionIdRequestBody','Required parameter requestParameters.connectionIdRequestBody was null or undefined when calling syncConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionIdRequestBodyToJSON(requestParameters.connectionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobInfoReadFromJSON(jsonValue));
    }

    /**
     * Trigger a manual sync of the connection
     */
    async syncConnection(requestParameters: SyncConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<JobInfoRead> {
        const response = await this.syncConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a connection
     */
    async updateConnectionRaw(requestParameters: UpdateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ConnectionRead>> {
        if (requestParameters.connectionUpdate === null || requestParameters.connectionUpdate === undefined) {
            throw new runtime.RequiredError('connectionUpdate','Required parameter requestParameters.connectionUpdate was null or undefined when calling updateConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/connections/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionUpdateToJSON(requestParameters.connectionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionReadFromJSON(jsonValue));
    }

    /**
     * Update a connection
     */
    async updateConnection(requestParameters: UpdateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ConnectionRead> {
        const response = await this.updateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
