/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckConnectionRead,
    CheckConnectionReadFromJSON,
    CheckConnectionReadToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    SourceCreate,
    SourceCreateFromJSON,
    SourceCreateToJSON,
    SourceDiscoverSchemaRead,
    SourceDiscoverSchemaReadFromJSON,
    SourceDiscoverSchemaReadToJSON,
    SourceDiscoverSchemaRequestBody,
    SourceDiscoverSchemaRequestBodyFromJSON,
    SourceDiscoverSchemaRequestBodyToJSON,
    SourceIdRequestBody,
    SourceIdRequestBodyFromJSON,
    SourceIdRequestBodyToJSON,
    SourceRead,
    SourceReadFromJSON,
    SourceReadToJSON,
    SourceReadList,
    SourceReadListFromJSON,
    SourceReadListToJSON,
    SourceSearch,
    SourceSearchFromJSON,
    SourceSearchToJSON,
    SourceUpdate,
    SourceUpdateFromJSON,
    SourceUpdateToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CheckConnectionToSourceRequest {
    sourceIdRequestBody: SourceIdRequestBody;
}

export interface CheckConnectionToSourceForUpdateRequest {
    sourceUpdate: SourceUpdate;
}

export interface CloneSourceRequest {
    sourceIdRequestBody: SourceIdRequestBody;
}

export interface CreateSourceRequest {
    sourceCreate: SourceCreate;
}

export interface DeleteSourceRequest {
    sourceIdRequestBody: SourceIdRequestBody;
}

export interface DiscoverSchemaForSourceRequest {
    sourceDiscoverSchemaRequestBody: SourceDiscoverSchemaRequestBody;
}

export interface GetSourceRequest {
    sourceIdRequestBody: SourceIdRequestBody;
}

export interface ListSourcesForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface SearchSourcesRequest {
    sourceSearch: SourceSearch;
}

export interface UpdateSourceRequest {
    sourceUpdate: SourceUpdate;
}

/**
 * 
 */
export class SourceApi extends runtime.BaseAPI {

    /**
     * Check connection to the source
     */
    async checkConnectionToSourceRaw(requestParameters: CheckConnectionToSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckConnectionRead>> {
        if (requestParameters.sourceIdRequestBody === null || requestParameters.sourceIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceIdRequestBody','Required parameter requestParameters.sourceIdRequestBody was null or undefined when calling checkConnectionToSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/check_connection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceIdRequestBodyToJSON(requestParameters.sourceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckConnectionReadFromJSON(jsonValue));
    }

    /**
     * Check connection to the source
     */
    async checkConnectionToSource(requestParameters: CheckConnectionToSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckConnectionRead> {
        const response = await this.checkConnectionToSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check connection for a proposed update to a source
     */
    async checkConnectionToSourceForUpdateRaw(requestParameters: CheckConnectionToSourceForUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckConnectionRead>> {
        if (requestParameters.sourceUpdate === null || requestParameters.sourceUpdate === undefined) {
            throw new runtime.RequiredError('sourceUpdate','Required parameter requestParameters.sourceUpdate was null or undefined when calling checkConnectionToSourceForUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/check_connection_for_update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceUpdateToJSON(requestParameters.sourceUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckConnectionReadFromJSON(jsonValue));
    }

    /**
     * Check connection for a proposed update to a source
     */
    async checkConnectionToSourceForUpdate(requestParameters: CheckConnectionToSourceForUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckConnectionRead> {
        const response = await this.checkConnectionToSourceForUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clone source
     */
    async cloneSourceRaw(requestParameters: CloneSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceRead>> {
        if (requestParameters.sourceIdRequestBody === null || requestParameters.sourceIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceIdRequestBody','Required parameter requestParameters.sourceIdRequestBody was null or undefined when calling cloneSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/clone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceIdRequestBodyToJSON(requestParameters.sourceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadFromJSON(jsonValue));
    }

    /**
     * Clone source
     */
    async cloneSource(requestParameters: CloneSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceRead> {
        const response = await this.cloneSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a source
     */
    async createSourceRaw(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceRead>> {
        if (requestParameters.sourceCreate === null || requestParameters.sourceCreate === undefined) {
            throw new runtime.RequiredError('sourceCreate','Required parameter requestParameters.sourceCreate was null or undefined when calling createSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceCreateToJSON(requestParameters.sourceCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadFromJSON(jsonValue));
    }

    /**
     * Create a source
     */
    async createSource(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceRead> {
        const response = await this.createSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a source
     */
    async deleteSourceRaw(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceIdRequestBody === null || requestParameters.sourceIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceIdRequestBody','Required parameter requestParameters.sourceIdRequestBody was null or undefined when calling deleteSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceIdRequestBodyToJSON(requestParameters.sourceIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a source
     */
    async deleteSource(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteSourceRaw(requestParameters, initOverrides);
    }

    /**
     * Discover the schema catalog of the source
     */
    async discoverSchemaForSourceRaw(requestParameters: DiscoverSchemaForSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceDiscoverSchemaRead>> {
        if (requestParameters.sourceDiscoverSchemaRequestBody === null || requestParameters.sourceDiscoverSchemaRequestBody === undefined) {
            throw new runtime.RequiredError('sourceDiscoverSchemaRequestBody','Required parameter requestParameters.sourceDiscoverSchemaRequestBody was null or undefined when calling discoverSchemaForSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/discover_schema`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceDiscoverSchemaRequestBodyToJSON(requestParameters.sourceDiscoverSchemaRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceDiscoverSchemaReadFromJSON(jsonValue));
    }

    /**
     * Discover the schema catalog of the source
     */
    async discoverSchemaForSource(requestParameters: DiscoverSchemaForSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceDiscoverSchemaRead> {
        const response = await this.discoverSchemaForSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get source
     */
    async getSourceRaw(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceRead>> {
        if (requestParameters.sourceIdRequestBody === null || requestParameters.sourceIdRequestBody === undefined) {
            throw new runtime.RequiredError('sourceIdRequestBody','Required parameter requestParameters.sourceIdRequestBody was null or undefined when calling getSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceIdRequestBodyToJSON(requestParameters.sourceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadFromJSON(jsonValue));
    }

    /**
     * Get source
     */
    async getSource(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceRead> {
        const response = await this.getSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sources for workspace. Does not return deleted sources.
     * List sources for workspace
     */
    async listSourcesForWorkspaceRaw(requestParameters: ListSourcesForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listSourcesForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadListFromJSON(jsonValue));
    }

    /**
     * List sources for workspace. Does not return deleted sources.
     * List sources for workspace
     */
    async listSourcesForWorkspace(requestParameters: ListSourcesForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceReadList> {
        const response = await this.listSourcesForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search sources
     */
    async searchSourcesRaw(requestParameters: SearchSourcesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceReadList>> {
        if (requestParameters.sourceSearch === null || requestParameters.sourceSearch === undefined) {
            throw new runtime.RequiredError('sourceSearch','Required parameter requestParameters.sourceSearch was null or undefined when calling searchSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceSearchToJSON(requestParameters.sourceSearch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadListFromJSON(jsonValue));
    }

    /**
     * Search sources
     */
    async searchSources(requestParameters: SearchSourcesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceReadList> {
        const response = await this.searchSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a source
     */
    async updateSourceRaw(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SourceRead>> {
        if (requestParameters.sourceUpdate === null || requestParameters.sourceUpdate === undefined) {
            throw new runtime.RequiredError('sourceUpdate','Required parameter requestParameters.sourceUpdate was null or undefined when calling updateSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sources/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceUpdateToJSON(requestParameters.sourceUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceReadFromJSON(jsonValue));
    }

    /**
     * Update a source
     */
    async updateSource(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SourceRead> {
        const response = await this.updateSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
