/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomDestinationDefinitionCreate,
    CustomDestinationDefinitionCreateFromJSON,
    CustomDestinationDefinitionCreateToJSON,
    CustomDestinationDefinitionUpdate,
    CustomDestinationDefinitionUpdateFromJSON,
    CustomDestinationDefinitionUpdateToJSON,
    DestinationDefinitionCreate,
    DestinationDefinitionCreateFromJSON,
    DestinationDefinitionCreateToJSON,
    DestinationDefinitionIdRequestBody,
    DestinationDefinitionIdRequestBodyFromJSON,
    DestinationDefinitionIdRequestBodyToJSON,
    DestinationDefinitionIdWithWorkspaceId,
    DestinationDefinitionIdWithWorkspaceIdFromJSON,
    DestinationDefinitionIdWithWorkspaceIdToJSON,
    DestinationDefinitionRead,
    DestinationDefinitionReadFromJSON,
    DestinationDefinitionReadToJSON,
    DestinationDefinitionReadList,
    DestinationDefinitionReadListFromJSON,
    DestinationDefinitionReadListToJSON,
    DestinationDefinitionUpdate,
    DestinationDefinitionUpdateFromJSON,
    DestinationDefinitionUpdateToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    PrivateDestinationDefinitionRead,
    PrivateDestinationDefinitionReadFromJSON,
    PrivateDestinationDefinitionReadToJSON,
    PrivateDestinationDefinitionReadList,
    PrivateDestinationDefinitionReadListFromJSON,
    PrivateDestinationDefinitionReadListToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CreateCustomDestinationDefinitionRequest {
    customDestinationDefinitionCreate?: CustomDestinationDefinitionCreate;
}

export interface CreateDestinationDefinitionRequest {
    destinationDefinitionCreate?: DestinationDefinitionCreate;
}

export interface DeleteCustomDestinationDefinitionRequest {
    destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId;
}

export interface DeleteDestinationDefinitionRequest {
    destinationDefinitionIdRequestBody: DestinationDefinitionIdRequestBody;
}

export interface GetDestinationDefinitionRequest {
    destinationDefinitionIdRequestBody: DestinationDefinitionIdRequestBody;
}

export interface GetDestinationDefinitionForWorkspaceRequest {
    destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId;
}

export interface GrantDestinationDefinitionToWorkspaceRequest {
    destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId;
}

export interface ListDestinationDefinitionsForWorkspaceRequest {
    workspaceIdRequestBody?: WorkspaceIdRequestBody;
}

export interface ListPrivateDestinationDefinitionsRequest {
    workspaceIdRequestBody?: WorkspaceIdRequestBody;
}

export interface RevokeDestinationDefinitionFromWorkspaceRequest {
    destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId;
}

export interface UpdateCustomDestinationDefinitionRequest {
    customDestinationDefinitionUpdate?: CustomDestinationDefinitionUpdate;
}

export interface UpdateDestinationDefinitionRequest {
    destinationDefinitionUpdate: DestinationDefinitionUpdate;
}

/**
 * 
 */
export class DestinationDefinitionApi extends runtime.BaseAPI {

    /**
     * Creates a custom destinationDefinition for the given workspace
     */
    async createCustomDestinationDefinitionRaw(requestParameters: CreateCustomDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/create_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDestinationDefinitionCreateToJSON(requestParameters.customDestinationDefinitionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Creates a custom destinationDefinition for the given workspace
     */
    async createCustomDestinationDefinition(requestParameters: CreateCustomDestinationDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.createCustomDestinationDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a destinationsDefinition
     */
    async createDestinationDefinitionRaw(requestParameters: CreateDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionCreateToJSON(requestParameters.destinationDefinitionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Creates a destinationsDefinition
     */
    async createDestinationDefinition(requestParameters: CreateDestinationDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.createDestinationDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a custom destination definition for the given workspace
     */
    async deleteCustomDestinationDefinitionRaw(requestParameters: DeleteCustomDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.destinationDefinitionIdWithWorkspaceId === null || requestParameters.destinationDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdWithWorkspaceId','Required parameter requestParameters.destinationDefinitionIdWithWorkspaceId was null or undefined when calling deleteCustomDestinationDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/delete_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdWithWorkspaceIdToJSON(requestParameters.destinationDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom destination definition for the given workspace
     */
    async deleteCustomDestinationDefinition(requestParameters: DeleteCustomDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteCustomDestinationDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a destination definition
     */
    async deleteDestinationDefinitionRaw(requestParameters: DeleteDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.destinationDefinitionIdRequestBody === null || requestParameters.destinationDefinitionIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdRequestBody','Required parameter requestParameters.destinationDefinitionIdRequestBody was null or undefined when calling deleteDestinationDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdRequestBodyToJSON(requestParameters.destinationDefinitionIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a destination definition
     */
    async deleteDestinationDefinition(requestParameters: DeleteDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteDestinationDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Get destinationDefinition
     */
    async getDestinationDefinitionRaw(requestParameters: GetDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        if (requestParameters.destinationDefinitionIdRequestBody === null || requestParameters.destinationDefinitionIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdRequestBody','Required parameter requestParameters.destinationDefinitionIdRequestBody was null or undefined when calling getDestinationDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdRequestBodyToJSON(requestParameters.destinationDefinitionIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Get destinationDefinition
     */
    async getDestinationDefinition(requestParameters: GetDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.getDestinationDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a destinationDefinition that is configured for the given workspace
     */
    async getDestinationDefinitionForWorkspaceRaw(requestParameters: GetDestinationDefinitionForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        if (requestParameters.destinationDefinitionIdWithWorkspaceId === null || requestParameters.destinationDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdWithWorkspaceId','Required parameter requestParameters.destinationDefinitionIdWithWorkspaceId was null or undefined when calling getDestinationDefinitionForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/get_for_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdWithWorkspaceIdToJSON(requestParameters.destinationDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Get a destinationDefinition that is configured for the given workspace
     */
    async getDestinationDefinitionForWorkspace(requestParameters: GetDestinationDefinitionForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.getDestinationDefinitionForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * grant a private, non-custom destinationDefinition to a given workspace
     */
    async grantDestinationDefinitionToWorkspaceRaw(requestParameters: GrantDestinationDefinitionToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PrivateDestinationDefinitionRead>> {
        if (requestParameters.destinationDefinitionIdWithWorkspaceId === null || requestParameters.destinationDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdWithWorkspaceId','Required parameter requestParameters.destinationDefinitionIdWithWorkspaceId was null or undefined when calling grantDestinationDefinitionToWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/grant_definition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdWithWorkspaceIdToJSON(requestParameters.destinationDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateDestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * grant a private, non-custom destinationDefinition to a given workspace
     */
    async grantDestinationDefinitionToWorkspace(requestParameters: GrantDestinationDefinitionToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PrivateDestinationDefinitionRead> {
        const response = await this.grantDestinationDefinitionToWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use
     */
    async listDestinationDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/destination_definitions/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all the destinationDefinitions the current Airbyte deployment is configured to use
     */
    async listDestinationDefinitions(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionReadList> {
        const response = await this.listDestinationDefinitionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all the destinationDefinitions the given workspace is configured to use
     */
    async listDestinationDefinitionsForWorkspaceRaw(requestParameters: ListDestinationDefinitionsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/list_for_workspace`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all the destinationDefinitions the given workspace is configured to use
     */
    async listDestinationDefinitionsForWorkspace(requestParameters: ListDestinationDefinitionsForWorkspaceRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionReadList> {
        const response = await this.listDestinationDefinitionsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Guaranteed to retrieve the latest information on supported destinations.
     * List the latest destinationDefinitions Airbyte supports
     */
    async listLatestDestinationDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/destination_definitions/list_latest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * Guaranteed to retrieve the latest information on supported destinations.
     * List the latest destinationDefinitions Airbyte supports
     */
    async listLatestDestinationDefinitions(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionReadList> {
        const response = await this.listLatestDestinationDefinitionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace\'s grants.
     */
    async listPrivateDestinationDefinitionsRaw(requestParameters: ListPrivateDestinationDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PrivateDestinationDefinitionReadList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/list_private`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrivateDestinationDefinitionReadListFromJSON(jsonValue));
    }

    /**
     * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace\'s grants.
     */
    async listPrivateDestinationDefinitions(requestParameters: ListPrivateDestinationDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PrivateDestinationDefinitionReadList> {
        const response = await this.listPrivateDestinationDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace
     */
    async revokeDestinationDefinitionFromWorkspaceRaw(requestParameters: RevokeDestinationDefinitionFromWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.destinationDefinitionIdWithWorkspaceId === null || requestParameters.destinationDefinitionIdWithWorkspaceId === undefined) {
            throw new runtime.RequiredError('destinationDefinitionIdWithWorkspaceId','Required parameter requestParameters.destinationDefinitionIdWithWorkspaceId was null or undefined when calling revokeDestinationDefinitionFromWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/revoke_definition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionIdWithWorkspaceIdToJSON(requestParameters.destinationDefinitionIdWithWorkspaceId),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * revoke a grant to a private, non-custom destinationDefinition from a given workspace
     */
    async revokeDestinationDefinitionFromWorkspace(requestParameters: RevokeDestinationDefinitionFromWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.revokeDestinationDefinitionFromWorkspaceRaw(requestParameters, initOverrides);
    }

    /**
     * Update a custom destinationDefinition for the given workspace
     */
    async updateCustomDestinationDefinitionRaw(requestParameters: UpdateCustomDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/update_custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDestinationDefinitionUpdateToJSON(requestParameters.customDestinationDefinitionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Update a custom destinationDefinition for the given workspace
     */
    async updateCustomDestinationDefinition(requestParameters: UpdateCustomDestinationDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.updateCustomDestinationDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update destinationDefinition
     */
    async updateDestinationDefinitionRaw(requestParameters: UpdateDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationDefinitionRead>> {
        if (requestParameters.destinationDefinitionUpdate === null || requestParameters.destinationDefinitionUpdate === undefined) {
            throw new runtime.RequiredError('destinationDefinitionUpdate','Required parameter requestParameters.destinationDefinitionUpdate was null or undefined when calling updateDestinationDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destination_definitions/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationDefinitionUpdateToJSON(requestParameters.destinationDefinitionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationDefinitionReadFromJSON(jsonValue));
    }

    /**
     * Update destinationDefinition
     */
    async updateDestinationDefinition(requestParameters: UpdateDestinationDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationDefinitionRead> {
        const response = await this.updateDestinationDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
