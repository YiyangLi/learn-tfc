/* tslint:disable */
/* eslint-disable */
/**
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckConnectionRead,
    CheckConnectionReadFromJSON,
    CheckConnectionReadToJSON,
    DestinationCreate,
    DestinationCreateFromJSON,
    DestinationCreateToJSON,
    DestinationIdRequestBody,
    DestinationIdRequestBodyFromJSON,
    DestinationIdRequestBodyToJSON,
    DestinationRead,
    DestinationReadFromJSON,
    DestinationReadToJSON,
    DestinationReadList,
    DestinationReadListFromJSON,
    DestinationReadListToJSON,
    DestinationSearch,
    DestinationSearchFromJSON,
    DestinationSearchToJSON,
    DestinationUpdate,
    DestinationUpdateFromJSON,
    DestinationUpdateToJSON,
    InvalidInputExceptionInfo,
    InvalidInputExceptionInfoFromJSON,
    InvalidInputExceptionInfoToJSON,
    NotFoundKnownExceptionInfo,
    NotFoundKnownExceptionInfoFromJSON,
    NotFoundKnownExceptionInfoToJSON,
    WorkspaceIdRequestBody,
    WorkspaceIdRequestBodyFromJSON,
    WorkspaceIdRequestBodyToJSON,
} from '../models';

export interface CheckConnectionToDestinationRequest {
    destinationIdRequestBody: DestinationIdRequestBody;
}

export interface CheckConnectionToDestinationForUpdateRequest {
    destinationUpdate: DestinationUpdate;
}

export interface CloneDestinationRequest {
    destinationIdRequestBody: DestinationIdRequestBody;
}

export interface CreateDestinationRequest {
    destinationCreate: DestinationCreate;
}

export interface DeleteDestinationRequest {
    destinationIdRequestBody: DestinationIdRequestBody;
}

export interface GetDestinationRequest {
    destinationIdRequestBody: DestinationIdRequestBody;
}

export interface ListDestinationsForWorkspaceRequest {
    workspaceIdRequestBody: WorkspaceIdRequestBody;
}

export interface SearchDestinationsRequest {
    destinationSearch: DestinationSearch;
}

export interface UpdateDestinationRequest {
    destinationUpdate: DestinationUpdate;
}

/**
 * 
 */
export class DestinationApi extends runtime.BaseAPI {

    /**
     * Check connection to the destination
     */
    async checkConnectionToDestinationRaw(requestParameters: CheckConnectionToDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckConnectionRead>> {
        if (requestParameters.destinationIdRequestBody === null || requestParameters.destinationIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationIdRequestBody','Required parameter requestParameters.destinationIdRequestBody was null or undefined when calling checkConnectionToDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/check_connection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationIdRequestBodyToJSON(requestParameters.destinationIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckConnectionReadFromJSON(jsonValue));
    }

    /**
     * Check connection to the destination
     */
    async checkConnectionToDestination(requestParameters: CheckConnectionToDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckConnectionRead> {
        const response = await this.checkConnectionToDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check connection for a proposed update to a destination
     */
    async checkConnectionToDestinationForUpdateRaw(requestParameters: CheckConnectionToDestinationForUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckConnectionRead>> {
        if (requestParameters.destinationUpdate === null || requestParameters.destinationUpdate === undefined) {
            throw new runtime.RequiredError('destinationUpdate','Required parameter requestParameters.destinationUpdate was null or undefined when calling checkConnectionToDestinationForUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/check_connection_for_update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationUpdateToJSON(requestParameters.destinationUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckConnectionReadFromJSON(jsonValue));
    }

    /**
     * Check connection for a proposed update to a destination
     */
    async checkConnectionToDestinationForUpdate(requestParameters: CheckConnectionToDestinationForUpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckConnectionRead> {
        const response = await this.checkConnectionToDestinationForUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clone destination
     */
    async cloneDestinationRaw(requestParameters: CloneDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationRead>> {
        if (requestParameters.destinationIdRequestBody === null || requestParameters.destinationIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationIdRequestBody','Required parameter requestParameters.destinationIdRequestBody was null or undefined when calling cloneDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/clone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationIdRequestBodyToJSON(requestParameters.destinationIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadFromJSON(jsonValue));
    }

    /**
     * Clone destination
     */
    async cloneDestination(requestParameters: CloneDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationRead> {
        const response = await this.cloneDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a destination
     */
    async createDestinationRaw(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationRead>> {
        if (requestParameters.destinationCreate === null || requestParameters.destinationCreate === undefined) {
            throw new runtime.RequiredError('destinationCreate','Required parameter requestParameters.destinationCreate was null or undefined when calling createDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCreateToJSON(requestParameters.destinationCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadFromJSON(jsonValue));
    }

    /**
     * Create a destination
     */
    async createDestination(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationRead> {
        const response = await this.createDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the destination
     */
    async deleteDestinationRaw(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.destinationIdRequestBody === null || requestParameters.destinationIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationIdRequestBody','Required parameter requestParameters.destinationIdRequestBody was null or undefined when calling deleteDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationIdRequestBodyToJSON(requestParameters.destinationIdRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the destination
     */
    async deleteDestination(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteDestinationRaw(requestParameters, initOverrides);
    }

    /**
     * Get configured destination
     */
    async getDestinationRaw(requestParameters: GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationRead>> {
        if (requestParameters.destinationIdRequestBody === null || requestParameters.destinationIdRequestBody === undefined) {
            throw new runtime.RequiredError('destinationIdRequestBody','Required parameter requestParameters.destinationIdRequestBody was null or undefined when calling getDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationIdRequestBodyToJSON(requestParameters.destinationIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadFromJSON(jsonValue));
    }

    /**
     * Get configured destination
     */
    async getDestination(requestParameters: GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationRead> {
        const response = await this.getDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List configured destinations for a workspace
     */
    async listDestinationsForWorkspaceRaw(requestParameters: ListDestinationsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationReadList>> {
        if (requestParameters.workspaceIdRequestBody === null || requestParameters.workspaceIdRequestBody === undefined) {
            throw new runtime.RequiredError('workspaceIdRequestBody','Required parameter requestParameters.workspaceIdRequestBody was null or undefined when calling listDestinationsForWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkspaceIdRequestBodyToJSON(requestParameters.workspaceIdRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadListFromJSON(jsonValue));
    }

    /**
     * List configured destinations for a workspace
     */
    async listDestinationsForWorkspace(requestParameters: ListDestinationsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationReadList> {
        const response = await this.listDestinationsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search destinations
     */
    async searchDestinationsRaw(requestParameters: SearchDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationReadList>> {
        if (requestParameters.destinationSearch === null || requestParameters.destinationSearch === undefined) {
            throw new runtime.RequiredError('destinationSearch','Required parameter requestParameters.destinationSearch was null or undefined when calling searchDestinations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationSearchToJSON(requestParameters.destinationSearch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadListFromJSON(jsonValue));
    }

    /**
     * Search destinations
     */
    async searchDestinations(requestParameters: SearchDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationReadList> {
        const response = await this.searchDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a destination
     */
    async updateDestinationRaw(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DestinationRead>> {
        if (requestParameters.destinationUpdate === null || requestParameters.destinationUpdate === undefined) {
            throw new runtime.RequiredError('destinationUpdate','Required parameter requestParameters.destinationUpdate was null or undefined when calling updateDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/destinations/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationUpdateToJSON(requestParameters.destinationUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationReadFromJSON(jsonValue));
    }

    /**
     * Update a destination
     */
    async updateDestination(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DestinationRead> {
        const response = await this.updateDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
